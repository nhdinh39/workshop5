[
{
	"uri": "/vi/1-preparation/",
	"title": "Chuẩn Bị Tài Nguyên",
	"tags": [],
	"description": "",
	"content": "Trong chương này, chúng ta sẽ lần lượt thực hiện:\nTạo 1 VPC với 2 Public Subnet, 2 Public Subnet, 1 S3 Gateway Endpoint Tạo 4 Security Group cho EC2 Instance, Lambda Function, SNS Interface Endpoint và Aurora PostgreSQL Tạo một SNS Interface Endpoint Tạo IAM Role cho EC2 Instance Tạo 3 S3 Bucket Note: Tất cả các tài nguyên trong bài workshop này sử dụng Region Singapore (ap-southeast-1) Nội dung 1.1 Tạo VPC\n1.2 Tạo Security Group\n1.3 Tạo SNS Interface Endpoint\n1.4 Tạo EC2 Instance\n1.5 Tạo IAM Role cho EC2\n1.6 Tạo S3 Buckets\n"
},
{
	"uri": "/vi/5-apigateway/5.1-apigateway/",
	"title": "Tạo API Gateway",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Truy cập Giao diện quản trị dịch vụ API Gateway Chọn APIs Tại mục REST API, chọn Build Tại trang Create REST API Chọn New API Tại mục API name, nhập monthly-sales-report-api Tại mục API endpoint type, chọn Regional Chọn Create API Hoàn thành tạo REST API "
},
{
	"uri": "/vi/2-aurorapostgres/2.1-createpostgres/",
	"title": "Tạo Aurora PostgreSQL",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Truy cập Giao diện quản trị dịch vụ RDS Chọn Databases Chọn Create Database Tại trang Create database Tại phần Choose a database creation method Tại mục Choose a database creation method, chọn Standard create Tại phần Engine options Tại mục Engine type, chọn Aurora (PostgreSQL Compatible) Tại mục Available versions, chọn Aurora PostgreSQL (Compatible with PostgreSQL 15.4) Tại phần Settings Tại mục DB cluster identifier, nhập aurora-postgresql Tại mục Master username, nhập postgres Tại mục Master password, nhập postgres Tại mục Confirm master password, nhập postgres Tại phần Instance configuration Chọn Burstable classes (includes t classes), sau đó chọn db.t3.medium Tại phần Availability \u0026amp; durability Chọn Don\u0026rsquo;t create an Aurora Replica Tại phần Connectivity Tại mục Compute resource, chọn Don’t connect to an EC2 compute resource Tại mục Virtual private cloud (VPC), chọn FCJ-vpc Tại mục DB subnet group, chọn Create new DB Subnet Group Tại mục VPC security group (firewall), chọn Choose existing, sau đó chọn DB-Security-Group Cuộn chuột xuống dưới cùng, chọn Create database, quá trình tạo DB bắt đầu Tại trang Database Chờ cho đến khi status của aurora-postgresql chuyển sang available (khoảng 15 phút) Chọn aurora-postgresql, lưu lại giá trị Endpoint của Writer để chuẩn bị cho bước sau "
},
{
	"uri": "/vi/",
	"title": "Tạo Báo Cáo Bán Hàng Hằng Tháng Với Kiến Trúc Serverless",
	"tags": [],
	"description": "",
	"content": "Tạo Báo Cáo Bán Hàng Hằng Tháng Với Kiến Trúc Serverless Trong bài workshop này, chúng ta sẽ cùng tìm hiểu về các bước để tiến hành từng bước để xây dựng một Kiến Trúc Serverless nhằm mục đích Tạo Báo Cáo Bán Hàng Hằng Tháng\nKiến trúc của bài workshop Hình ảnh báo cáo Nội dung 1. Chuẩn Bị Tài Nguyên\n2. Tạo Aurora PostgreSQL\n3. Tạo SNS Topic\n4. Tạo Lambda Function\n5. Tạo API Gateway\n6. Tạo EventBridge Scheduler\n7. Tạo Static Website\n8. Kiểm Tra Hoạt Động\n9. Dọn Dẹp Tài Nguyên\n"
},
{
	"uri": "/vi/4-lambda/4.1-createroles/",
	"title": "Tạo IAM Role cho Lambda",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Truy cập Giao diện quản trị dịch vụ IAM Chọn Policies Chọn Create Policy Chọn JSON Copy và dán đoạn mã JSON sau đây để định nghĩa các quyền cho Policy Thay thế \u0026lt;CHANGE_YOUR_BUCKET_SAVE_REPORT_RESULT\u0026gt; bằng tên Bucket để lưu Report đã lưu lại ở bước 1.6 Thay thế \u0026lt;CHANGE_YOUR_SNS_TOPIC_ARN\u0026gt; bằng SNS Topic ARN đã lưu lại ở bước 3 Chọn Next {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;s3:PutObject\u0026#34;,\r\u0026#34;s3:GetObject\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::\u0026lt;CHANGE_YOUR_BUCKET_SAVE_REPORT_RESULT\u0026gt;/*\u0026#34;\r},\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;sns:Publish\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;\u0026lt;CHANGE_YOUR_SNS_TOPIC_ARN\u0026gt;\u0026#34;\r},\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;logs:CreateLogGroup\u0026#34;,\r\u0026#34;logs:CreateLogStream\u0026#34;,\r\u0026#34;logs:PutLogEvents\u0026#34;,\r\u0026#34;ec2:CreateNetworkInterface\u0026#34;,\r\u0026#34;ec2:DescribeNetworkInterfaces\u0026#34;,\r\u0026#34;ec2:DeleteNetworkInterface\u0026#34;,\r\u0026#34;ec2:AssignPrivateIpAddresses\u0026#34;,\r\u0026#34;ec2:UnassignPrivateIpAddresses\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r} Tại mục Policy name, nhập Lambda-Report-Policy Chọn Create Policy Các quyền được cấp cho chính sách Lambda-Report-Policy\n+Được phép PutObject, GetObject của S3 Bucket monthly-sales-report-result\n+Được phép Publish đối với SNS Topic monthly-sales-report-topic\n+Được các quyền cơ bản để ghi log và gán VPC\nTại Giao diện quản trị dịch vụ IAM Chọn Roles Chọn Create Role Tại trang Select trusted entity Chọn AWS service Tại mục Service or use case, chọn Lambda Chọn Next Tại trang Add permissions Tại ô tìm kiếm, nhập Lambda-Report-Policy đã tạo ở bước trước Tích chọn Lambda-Report-Policy Chọn Next Tại trang Name, review, and create Tại mục Role name, nhập Lambda-Report-Role Kiểm tra lại thông tin, sau đó chọn Create Role "
},
{
	"uri": "/vi/1-preparation/1.1-createvpc/",
	"title": "Tạo VPC ",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Truy cập giao diện quản trị dịch vụ VPC Chọn Your VPC Chọn Create VPC Tại trang Create VPC Tại mục Resources, chọn VPC and more Tại mục Name tag, nhập FCJ Tại mục IPv4 CIDR, nhập 10.10.0.0/16 Tại mục Number of public subnets, chọn 2 Tại mục Number of private subnets, chọn 2 Tại mục VPC endpoints, chọn S3 Gateway Chọn Create VPC Chờ cho đến khi VPC và các thành phần tạo xong Chọn View VPC Hoàn thành tạo VPC Tại giao diện VPC Chọn Subnets Chọn FCJ-subnet-public1-ap-southeast-1a Chọn Actions, sau đó chọn Edit subnet settings Tại trang Edit subnet settings Tại mục Auto-assign IP settings, kích chọn Enable auto-assign public IPv4 address Chọn Save Thực hiện tương tự đối với FCJ-subnet-public2-ap-southeast-1b "
},
{
	"uri": "/vi/8-check/8.1-website/",
	"title": "Từ Static Website",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Tại giao diện Static Website đã mở trong bước 7.3 Giữ nguyên Month và Year theo mặc định, hoặc có thể chọn Month hoặc Year khác theo ý của bạn Chọn Generate Report Đợi khoảng vài giây, chúng ta nhận được thông báo {Month}-{Year}-Monthly-Sales-Report has been successfully created! và link Download Report Chọn Download Report, sau đó thử mở nó bằng Excel, ta được báo cáo như hình bên dưới Thử Ctrl + P Thử truy cập gmail, chúng ta nhận được mail với tiêu đề dạng {Month}-{Year}-Monthly-Sales-Report Thử nhấn vào để xem, ta có nội dung như hình bên dưới, có kèm Presigned URL để Download Report Bạn có thể chọn Month hoặc Year khác trên Static Website để kiểm tra thêm.\nNhư vậy là ứng dụng của chúng ta đã hoạt động tốt với việc kiểm tra từ Static Website\n"
},
{
	"uri": "/vi/7-staticwebsite/7.1-upload/",
	"title": "Upload Website Into S3",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện COPY đoạn CODE sau \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Report Generator\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; h1, .container, .button, #response, .active { margin-left: 20px; } body { font-family: Arial, sans-serif; } .container { display: flex; flex-direction: column; margin-bottom: 20px; } .label { font-weight: bold; margin-bottom: 5px; } .dropdown { width: 200px; margin-bottom: 20px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; } .button { cursor: pointer; background-color: #19d41f; color: white; padding: 15px 30px; border: none; border-radius: 8px; font-size: 18px; transition: background-color 0.3s ease; } .button:hover { background-color: #3f9e44; } #response { margin-top: 20px; font-size: 18px; } .loading { display: none; } .active { display: block; margin-top: 20px; font-size: 18px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Monthly Sales Report Generator\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;Select Month:\u0026lt;/div\u0026gt; \u0026lt;select id=\u0026#34;month\u0026#34; class=\u0026#34;dropdown\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;Select Year:\u0026lt;/div\u0026gt; \u0026lt;select id=\u0026#34;year\u0026#34; class=\u0026#34;dropdown\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;button\u0026#34; onclick=\u0026#34;callApi()\u0026#34;\u0026gt;Generate Report\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;loading\u0026#34; class=\u0026#34;loading\u0026#34;\u0026gt;Loading...\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;response\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function populateDropdowns() { var monthDropdown = document.getElementById(\u0026#34;month\u0026#34;); var yearDropdown = document.getElementById(\u0026#34;year\u0026#34;); for (var i = 1; i \u0026lt;= 12; i++) { var option = document.createElement(\u0026#34;option\u0026#34;); option.value = i; option.text = i; monthDropdown.appendChild(option); } for (var j = 2022; j \u0026lt;= 2030; j++) { var option = document.createElement(\u0026#34;option\u0026#34;); option.value = j; option.text = j; yearDropdown.appendChild(option); } } function callApi() { document.getElementById(\u0026#34;response\u0026#34;).innerHTML = \u0026#34;\u0026#34;; document.getElementById(\u0026#34;loading\u0026#34;).classList.add(\u0026#34;active\u0026#34;); var month = document.getElementById(\u0026#34;month\u0026#34;).value; var year = document.getElementById(\u0026#34;year\u0026#34;).value; var apiUrl = \u0026#34;\u0026lt;CHANGE_YOUR_API_URL_HERE\u0026gt;/report\u0026#34;; fetch(apiUrl, { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }, body: JSON.stringify({ month: month, year: year }) }) .then(response =\u0026gt; response.json()) .then(data =\u0026gt; { document.getElementById(\u0026#34;loading\u0026#34;).classList.remove(\u0026#34;active\u0026#34;); displayResult(data); }) .catch(error =\u0026gt; { document.getElementById(\u0026#34;loading\u0026#34;).classList.remove(\u0026#34;active\u0026#34;); displayError(\u0026#34;Error: \u0026#34; + error.message); }); } function displayResult(data) { var responseDiv = document.getElementById(\u0026#34;response\u0026#34;); responseDiv.innerHTML = \u0026#34;\u0026#34;; var status = data.status; var nameReport = data.report_name; var nameReportDiv = document.createElement(\u0026#34;div\u0026#34;); nameReportDiv.innerHTML = `\u0026lt;b\u0026gt;${nameReport}\u0026lt;/b\u0026gt;` + \u0026#34; has been successfully created!\u0026#34;; responseDiv.appendChild(nameReportDiv); if (status === \u0026#34;Success\u0026#34;) { var downloadLink = document.createElement(\u0026#34;a\u0026#34;); downloadLink.href = data.url; downloadLink.download = `${nameReport}.xlsx`; downloadLink.innerText = \u0026#34;Download Report\u0026#34;; responseDiv.appendChild(downloadLink); } else { displayError(\u0026#34;Error: \u0026#34; + data.message); } } function displayError(message) { var responseDiv = document.getElementById(\u0026#34;response\u0026#34;); responseDiv.innerHTML = \u0026#34;\u0026lt;span style=\u0026#39;color: red;\u0026#39;\u0026gt;\u0026#34; + message + \u0026#34;\u0026lt;/span\u0026gt;\u0026#34;; } populateDropdowns(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Quay trở lại cửa sổ MobaXterm Tạo một file index.html vim index.html Dán đoạn CODE đã COPY vào và thay thế \u0026lt;CHANGE_YOUR_API_URL_HERE\u0026gt; bằng Invoke URL đã lưu lại ở bước 5.3 Upload file index.html lên S3 Bucket monthly-sales-report-web aws s3 cp index.html s3://monthly-sales-report-web monthly-sales-report-web là tên S3 Bucket để lưu Static Website đã tạo trong bước 1.6. Nếu tên Bucket của bạn khác, phải thay đổi lại cho phù hợp.\nTruy cập Giao diện quản trị dịch vụ S3 Chọn Bucket, chọn monthly-sales-report-web, chúng ta thấy file index.html vừa xuất hiện "
},
{
	"uri": "/vi/2-aurorapostgres/2.2-installclient/",
	"title": "Cài đặt PostgreSQL Client",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Quay trở lại cửa sổ MobaXterm Thực hiện câu lệnh sau để cài đặt PostgreSQL Client sudo dnf install postgresql15 -y Thực hiện câu lệnh sau để đăng nhập vào Aurora PostgreSQL DB, mặc định sẽ vào database postgres Thay đổi \u0026lt;CHANGE_YOUR_AURORA_POSTGRESQL_ENDPOINT_HERE\u0026gt; bằng Aurora PostgreSQL Endpoint chúng ta đã lưu lại ở bước 2.1 Nhập password postgres để đăng nhập psql -h \u0026lt;CHANGE_YOUR_AURORA_POSTGRESQL_ENDPOINT_HERE\u0026gt; -p 5432 -U postgres Thực hiện câu lệnh để in ra các thông tin đăng nhập hiện tại, gồm user, database name, host, port SELECT current_user, current_database(), :\u0026#39;HOST\u0026#39; host, inet_server_port() port; Kiểm tra các Database hiện có SELECT datname FROM pg_database; Tiến hành tạo Database sales CREATE DATABASE sales; Kiểm tra các Database hiện có, lúc này đã có thêm sales SELECT datname FROM pg_database; Thoát khỏi Aurora PostgreSQL exit "
},
{
	"uri": "/vi/4-lambda/4.2-dependencies/",
	"title": "Cài đặt Python Dependencies",
	"tags": [],
	"description": "",
	"content": "Cài đặt Python Quay trở lại giao diện MobaXterm\nCài đặt Python 3.11 và trình quản lý gói Pip sudo dnf install python3.11 -y\rcurl -sS https://bootstrap.pypa.io/get-pip.py | python3.11 Cài đặt Python Dependencies Tạo thư mục python mkdir python Cài đặt các Python Dependencies cần thiết cho bài workshop vào thư mục python vừa tạo Trong đó: psycopg2-binary: Thư viện để python tương tác với PostgreSQL openpyxl: Thư viện để python tương tác với Excel pytz: Thư viện để python chuẩn hóa múi giờ python3.11 -m pip install psycopg2-binary -t python/\rpython3.11 -m pip install openpyxl -t python/\rpython3.11 -m pip install pytz -t python/ Tạo file Zip các Dependencies và Upload lên S3 Bucket Tạo một file zip tên monthly-sales-report-layer.zip từ thư mục python có chứa các Python Denpendencies sudo zip -r monthly-sales-report-layer.zip python Upload monthly-sales-report-layer.zip lên S3 Bucket monthly-sales-report-layer aws s3 cp monthly-sales-report-layer.zip s3://monthly-sales-report-layer monthly-sales-report-layer là tên S3 Bucket để lưu các Zip file dùng để tạo các Lambda Layer đã tạo trong bước 1.6. Nếu tên Bucket của bạn khác, phải thay đổi lại cho phù hợp.\nTruy cập Giao diện quản trị dịch vụ S3\nChọn Buckets, chọn monthly-sales-report-layer chúng ta thấy monthly-sales-report-layer.zip vừa xuất hiện Chọn monthly-sales-report-layer.zip, lưu lại Object URL để chuẩn bị cho bước tiếp theo "
},
{
	"uri": "/vi/7-staticwebsite/7.2-public/",
	"title": "Public Static Website",
	"tags": [],
	"description": "",
	"content": "Enable Static website hosting Tại giao diện S3 Bucket monthly-sales-report-web Chọn Properties Cuộn chuột xuống dưới cùng, tại mục Static website hosting, chọn Edit Tại trang Edit static website hosting Tại mục Static website hosting, chọn enable Tại mục Index document, nhập index.html Chọn Save changes Edit Block public access Tại giao diện S3 Bucket monthly-sales-report-web Chọn Permissions Tại mục Block public access (bucket settings), chọn Edit Tại trang Edit Block public access (bucket settings) Bỏ chọn Block all public access Chọn Save changes Nhập confirm, sau đó chọn Confirm để xác nhận Edit Bucket Policy Tại giao diện Permissions Tại mục Bucket policy, chọn Edit Copy và dán đoạn Policy sau Thay thế \u0026lt;CHANGE_YOUR_BUCKET_SAVE_WEB\u0026gt; bằng tên Bucket để lưu Static Website đã lưu lại ở bước 1.6 {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::\u0026lt;CHANGE_YOUR_BUCKET_SAVE_WEB\u0026gt;/*\u0026#34;\r}\r]\r} Chọn Save changes "
},
{
	"uri": "/vi/2-aurorapostgres/",
	"title": "Tạo Aurora PostgreSQL",
	"tags": [],
	"description": "",
	"content": "\nTrong chương này, chúng ta sẽ lần lượt tìm hiểu:\nCách tạo 1 Aurora PostgreSQL Cluster Cách cài đặt PostgreSQL Client và sử dụng nó để kết nối với Aurora PostgreSQL Cách Restore Example Data bằng lệnh pg_restore Nội dung 2.1 Tạo Aurora PostgreSQL\n2.2 Cài đặt PostgreSQL Client\n2.3 Khôi phục Example Data\n"
},
{
	"uri": "/vi/5-apigateway/5.2-resouremethod/",
	"title": "Tạo Resource, Method",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Tại giao diện monthly-sales-report-api Chọn Create resource Tại trang Create resource Tại mục Resource name, nhập report Tích chọn CORS (Cross Origin Resource Sharing) Chọn Create resource Hoàn thành tạo Resource cho REST API Chọn Create method Tại trang Create method Tại mục Method type, chọn POST Tại mục Intergration type, chọn Lambda function Tích chọn Lambda proxy intergration Tại mục Lambda function, chọn monthly-sales-report-lambda Chọn Create method Hoàn thành tạo Method cho Resource của REST API Điều này có nghĩa là khi API được gọi, thì API Gateway sẽ gọi Lambda Function monthly-sales-report-lambda\nQuay trở lại giao diện Resource report, chọn Enable CORS Tại trang Enable CORS Tích chọn OPTION và POST Chọn Save "
},
{
	"uri": "/vi/1-preparation/1.2-createsg/",
	"title": "Tạo Security Group",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Trong giao diện VPC Chọn Security Group Chọn Create security group Tạo Security Group cho EC2 Instance Tại mục Security group name, nhập EC2-Security-Group Tại mục Description, nhập Security Group for FCJ-Instance Tại mục VPC, click dấu X để chọn FCJ-vpc Trong phần Inbound rule, chọn Add rule thêm 1 Inbound Rule Type chọn SSH, Source chọn Anywhere (0.0.0.0/0) Kéo xuống dưới cùng, chọn Create security group Thực hiện tương tự để tạo Security cho Lambda Function, SNS Interface Endpoint và Aurora PostgreSQL Tạo Security Group cho Lambda Function Tại mục Security group name, nhập Lambda-Security-Group Tại mục Description, nhập Security Group for Lambda Tại mục VPC, click dấu X để chọn FCJ-vpc Kéo xuống dưới cùng, chọn Create security group Tạo Security Group cho SNS Interface Endpoint Tại mục Security group name, nhập SNS-Endpoint-Security-Group Tại mục Description, nhập Security Group for SNS Interface Endpoint Tại mục VPC, click dấu X để chọn FCJ-vpc Trong phần Inbound rule, chọn Add rule thêm 2 Inbound Rule Type chọn All traffic, Source chọn Lambda-Security-Group Kéo xuống dưới cùng, chọn Create security group Tạo Security Group cho Aurora PostgreSQL Tại mục Security group name, nhập DB-Security-Group Tại mục Description, nhập Security Group for Aurora PostgreSQL Tại mục VPC, click dấu X để chọn FCJ-vpc Trong phần Inbound rule, chọn Add rule thêm 2 Inbound Rule Type chọn PostgreSQL, Source chọn EC2-Security-Group Type chọn PostgreSQL, Source chọn Lambda-Security-Group Kéo xuống dưới cùng, chọn Create security group Hoàn thành tạo 4 Security Group "
},
{
	"uri": "/vi/8-check/8.2-eventbridge/",
	"title": "Từ EventBridge",
	"tags": [],
	"description": "",
	"content": "Do EventBridge Scheduler chúng ta đã thiết kế tự động trigger vào ngày 1 hằng tháng.\nNên chúng ta sẽ thực hiện việc test này thông qua chức năng Test event của Lambda Function\nTrình tự thực hiện Tại giao diện của Lambda Function monthly-sales-report-lambda Chọn Test Chọn Create new event Tại mục Event JSON, nhập {\u0026ldquo;headers\u0026rdquo;: {\u0026ldquo;origin\u0026rdquo;: \u0026ldquo;event-bridge\u0026rdquo;}}, giống với payload chúng ta đã thiết kế trong EventBridge Scheduler Chọn Save Chọn Test, chúng ta thấy thông báo thực hiện thành công Bấm vào để xem chi tiết executing log Thử truy cập gmail, chúng ta nhận được mail với tiêu đề dạng {Month}-{Year}-Monthly-Sales-Report. Thời điểm thực hiện bài workshop này vào tháng 12.\nNên trong hình là Nov-2023-Monthly-Sales-Report do Lambda Function chúng ta thiết kế sẽ tạo báo cáo của tháng trước nếu như trigger dạng Event Bridge. Thử nhấn vào để xem, ta có nội dung như hình bên dưới, có kèm Presigned URL để Download Report Chọn Download Report Thử mở nó bằng Excel file Report vừa tải về, ta được báo cáo như hình bên dưới Thử Ctrt + P Truy cập Giao diện quản trị dịch vụ S3 Chọn Buckets, chọn monthly-sales-report-result chúng ta thấy các báo cáo chúng ta đã tạo được lưu tại đây Presigned URL chỉ có giá trị trong vòng 1 tuần kể từ thời điểm báo cáo được tạo. Trường hợp bạn muốn xem lại báo cáo sau một khoảng thời gian.\nBạn có thể vào S3 Bucket monthly-sales-report-result như trên để download trong trường hợp cần thiết.\nXin chúc mừng, chúng ta đã thực hiện thành công bài workshop. Hãy tiến hành dọn dẹp tài nguyên để tránh phát sinh chi phí.\n"
},
{
	"uri": "/vi/5-apigateway/5.3-deployapi/",
	"title": "Deploy API",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Tại giao diện monthly-sales-report-api Chọn Deploy API Tại trang Deploy API Tại mục Stage, chọn *New stage* Tại mục Stage name, nhập dev Chọn Deploy Hoàn thành tạo Deploy API, lưu lại giá trị Invoke URL để chuẩn bị cho bước sau "
},
{
	"uri": "/vi/2-aurorapostgres/2.3-restoredata/",
	"title": "Khôi phục Example Data",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Truy cập Download Source để download các tài nguyên mẫu của bài workshop Sau khi tải về, tiến hành giải nén Kéo và thả để sao chép file sales_db_backup.sql vào vùng thư mục của cửa sổ MobaXterm Sao chép thành công Tại cửa sổ MobaXterm Thực hiện câu lệnh sau để tiến hành khôi phục dữ liệu mẫu với sales_db_backup.sql chúng ta vừa tải về Thay đổi \u0026lt;CHANGE_YOUR_AURORA_POSTGRESQL_ENDPOINT_HERE\u0026gt; bằng Aurora PostgreSQL Endpoint chúng ta đã lưu lại ở bước 2.1 Nhập password postgres để đăng nhập pg_restore -h \u0026lt;CHANGE_YOUR_AURORA_POSTGRESQL_ENDPOINT_HERE\u0026gt; -p 5432 -U postgres -d sales -Fc sales_db_backup.sql Đăng nhập lại Aurora PostgreSQL bằng lệnh sau, lần này ta chọn database sales psql -h \u0026lt;CHANGE_YOUR_AURORA_POSTGRESQL_ENDPOINT_HERE\u0026gt; -p 5432 -U postgres -d sales Kiểm tra số bảng hiện có trong database sales bằng lệnh \\dt, ta thấy có 2 bảng staffs và sales \\dt Xem dữ liệu của bảng staffs SELECT * FROM staffs; Xem dữ liệu của bảng sales SELECT * FROM sales LIMIT 20; Thoát khỏi Aurora PostgreSQL exit "
},
{
	"uri": "/vi/7-staticwebsite/7.3-check/",
	"title": "Kiểm tra Website",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Truy cập Giao diện quản trị dịch vụ S3 Chọn Bucket, chọn monthly-sales-report-web Chọn index.html Kích chọn Object URL Giao diện web như hình bên dưới là bạn đã Public Static Website thành công Chức năng của Website:\nKhi nhấn Button Generation Report thì sẽ gọi phương thức POST đến API Gateway mà chúng ta đã tạo ở chương 5, sau đó API Gateway sẽ gọi Lambda Function để tạo và lưu Report vào S3 và phản hồi về User. Đồng thời cũng gửi một mail thông báo cho User kèm Presigned URL để download Report từ S3.\n"
},
{
	"uri": "/vi/4-lambda/4.3-lambdalayer/",
	"title": "Tạo Lambda Layer",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Truy cập Giao diện quản trị dịch vụ Lambda Chọn Layers Chọn Create layer Tại trang Create layer Tại mục Name, nhập report-layer Chọn Upload a file from Amazon S3 Tại mục Amazon S3 link URL, nhập Object URL của monthly-sales-report-layer.zip đã lưu lại ở bước 4.2 Tại mục Compatible architectures, chọn x86_64 Tại mục Compatible runtimes, chọn Python 3.11 Chọn Create Hoàn thành tạo Lambda Layer "
},
{
	"uri": "/vi/1-preparation/1.3-snsendpoint/",
	"title": "Tạo SNS Interface Endpoint",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Trong giao diện VPC Chọn Endpoints Chọn Create endpoint Tại trang Create endpoint Tại mục Name tag, nhập SNS-Endpoint Tại mục Service category, chọn AWS Service Tại mục Services, trong ô tìm kiếm nhập sns, sau đó chọn sns Interface Endpoint như hình bên dưới Tại mục VPC, chọn FCJ-vpc Tại mục Subnets, chọn 2 AZ và 2 Private Subnet Tại mục Security groups, chọn SNS-Endpoint-Security-Group Kéo xuống dưới cùng, chọn Create endpoint Hoàn thành tạo SNS Interface Endpoint "
},
{
	"uri": "/vi/3-sns/",
	"title": "Tạo SNS Topic",
	"tags": [],
	"description": "",
	"content": "\nTrong bước này, chúng ta sẽ thực hiện Tạo SNS Topic và Subcription nhằm mục đích gửi mail thông báo và Presigned URL khi tạo Report\nTạo SNS Topic Truy cập Giao diện quản trị dịch vụ SNS Chọn Topics Chọn Create Topic Tại trang Create Topic Tại mục Type, chọn Standard Tại mục Name, nhập monthly-sales-report-topic Cuộn chuột xuống dưới cùng, chọn Create topic Tạo Subcription Tại trang monthly-sales-report-topic vừa tạo xong Chọn Create Subcription Tại trang Create Subcription Tại mục Protocol, chọn Email Tại mục Endpoint, nhập email của bạn, ví dụ example@gmail.com Chọn Create Subcription Tạo Subcription thành công, lúc này status đang là Pending confirmation Truy cập gmail của bạn (hoặc email bạn đã đăng ký ở Subcription), tiến hành Confirm subcription Xác nhận thành công Quay trở lại giao diện Subcription, lúc này status đã chuyển sang trạng thái confirmed\nLưu lại giá trị SNS Topic ARN để chuẩn bị cho bước sau "
},
{
	"uri": "/vi/1-preparation/1.4-createec2/",
	"title": "Tạo EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Truy cập Giao diện quản trị dịch vụ EC2 Chọn Key Pairs Chọn Create key pair Tại trang Create key pair Tại mục Name, nhập FCJ-keypair Tại mục Key pair type, chọn RSA Tại mục Private key file format chọn .pem Sau đó chọn Create key pair và lưu lại file FCJ-keypair.pem trên máy tính của bạn để sử dụng cho dịch vụ SSH ở những bước kế tiếp Thành công tạo FCJ-keypair.pem Quay lại Giao diện quản trị dịch vụ EC2 Chọn Instances Chọn Launch instances Tại trang Launch an Instance Tại mục Name, nhập FCJ-Instance Tại mục Amazon Machine Image (AMI), chọn Amazon Linux 2023 AMI Tại mục Instance type, chọn t2.micro Tại mục Key pair (login), chọn FCJ-keypair đã được tạo ở bước trước Tại mục Network settings chọn Edit Tại mục VPC, chọn FCJ-vpc Tại mục Subnet, chọn FCJ-subnet-public1-ap-southeast-1a Tại mục Auto-assign Public IP, chọn Enable, nếu không Enable thì bạn có thể đã bỏ qua Enable auto-assign public IPv4 address ở bước 1.1 Tại mục Firewall (security groups), chọn Select existing security group, và chọn EC2-Security-Group Kiểm tra lại thông tin và chọn Launch instance Hoàn thành tạo EC2 Instance "
},
{
	"uri": "/vi/4-lambda/4.4-lambdafunction/",
	"title": "Tạo Lambda Function",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Truy cập Giao diện quản trị dịch vụ Lambda Chọn Functions Chọn Create function Tại trang Create function Tại mục Function name, nhập monthly-sales-report-lambda Tại mục Runtime, chọn Python 3.11 Tại mục Execute role, chọn Use an existing role, sau đó chọn Lambda-Report-Role Chọn Create function Hoàn thành tạo Lambda Function Chọn Layer, sau đó chọn Add Layer Tại trang Add Layer Chọn Custom layers, chọn report-layer và version 1 Chọn Add Hoàn thành Add report-layer vào Lambda Function Copy và dán đoạn Code sau vào mục Code của Lambda Function\nimport os\rimport boto3\rimport json\rimport pytz\rimport psycopg2\rimport datetime\rfrom openpyxl import Workbook\rfrom openpyxl.chart import BarChart, Reference, shapes\rfrom openpyxl.utils import get_column_letter\rfrom openpyxl.styles import Font, Alignment, Border, Side, PatternFill\rpostgres_dbname = os.environ[\u0026#39;postgres_dbname\u0026#39;]\rpostgres_user = os.environ[\u0026#39;postgres_user\u0026#39;]\rpostgres_password = os.environ[\u0026#39;postgres_password\u0026#39;]\rpostgres_host = os.environ[\u0026#39;postgres_host\u0026#39;]\rs3_bucket_result = os.environ[\u0026#39;s3_bucket_result\u0026#39;]\rs3_bucket_web = os.environ[\u0026#39;s3_bucket_web\u0026#39;]\rsns_topic_arn = os.environ[\u0026#39;sns_topic_arn\u0026#39;]\rdef get_data(month, year):\r# Connect to Aurora PostgreSQL\rconn = psycopg2.connect(f\u0026#34;dbname={postgres_dbname} user={postgres_user} password={postgres_password} host={postgres_host}\u0026#34;)\rcur = conn.cursor()\r# Query Profit for Total Profit Chart\rcur.execute(f\u0026#34;SELECT to_char(date_trunc(\u0026#39;day\u0026#39;, date), \u0026#39;fmDD\u0026#39;) AS date, SUM(profit) \\\rFROM sales \\\rWHERE EXTRACT(MONTH FROM date) = {month} AND EXTRACT(YEAR FROM date) = {year} \\\rGROUP BY date_trunc(\u0026#39;day\u0026#39;, date) \\\rORDER BY date_trunc(\u0026#39;day\u0026#39;, date);\u0026#34;)\rdata_profit = cur.fetchall()\r# Query Profit for Top 10 Product Table\rcur.execute(f\u0026#34;SELECT ROW_NUMBER() OVER (ORDER BY SUM(profit) DESC) AS id, product, SUM(profit) \\\rFROM sales \\\rWHERE EXTRACT(MONTH FROM date) = {month} AND EXTRACT(YEAR FROM date) = {year} \\\rGROUP BY product \\\rORDER BY SUM(profit) DESC \\\rLIMIT 10;\u0026#34;)\rdata_product = cur.fetchall()\r# Query Profit for Top 10 Staff Table\rcur.execute(f\u0026#34;SELECT ROW_NUMBER() OVER (ORDER BY SUM(sales.profit) DESC) AS id, staffs.name, SUM(sales.profit) \\\rFROM sales \\\rJOIN staffs ON staffs.id = sales.staff_id \\\rWHERE EXTRACT(MONTH FROM date) = {month} AND EXTRACT(YEAR FROM date) = {year} \\\rGROUP BY staffs.name \\\rORDER BY SUM(sales.profit) DESC \\\rLIMIT 10;\u0026#34;)\rdata_staff = cur.fetchall()\r# Disconnect from Aurora PostgreSQL\rcur.close()\rconn.close()\rreturn data_profit, data_product, data_staff\rdef create_report(month, year):\r# Get data from Aurora PostgreSQL\rdata_profit, data_product, data_staff = get_data(month, year)\r# Create new Excel Workbook\rwb = Workbook()\rws = wb.active # Sheet 1\rws2 = wb.create_sheet(title=\u0026#34;Reference\u0026#34;) # Sheet 2\r# Create Title Report\rreport_name = f\u0026#34;{datetime.datetime.strptime(str(month), \u0026#39;%m\u0026#39;).strftime(\u0026#39;%b\u0026#39;)}-{year}-Monthly-Sales-Report\u0026#34;\rws.title = \u0026#34;Report\u0026#34;\rws[\u0026#34;A1\u0026#34;] = f\u0026#34;Monthly Sales Report\u0026#34;\rws[\u0026#34;A1\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\rws[\u0026#34;A1\u0026#34;].font = Font(size=30, bold=True)\rws.merge_cells(\u0026#34;A1:J1\u0026#34;)\rws[\u0026#34;A1\u0026#34;].fill = PatternFill(start_color=\u0026#34;4cd137\u0026#34;, end_color=\u0026#34;4cd137\u0026#34;, fill_type=\u0026#34;solid\u0026#34;)\rws[\u0026#34;A2\u0026#34;] = f\u0026#34;{datetime.datetime.strptime(str(month), \u0026#39;%m\u0026#39;).strftime(\u0026#39;%b\u0026#39;)}-{year}\u0026#34;\rws[\u0026#34;A2\u0026#34;].font = Font(size=20, bold=True)\rtime_create = datetime.datetime.now(pytz.timezone(\u0026#39;Asia/Ho_Chi_Minh\u0026#39;)).strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\rws[\u0026#34;I2\u0026#34;] = f\u0026#34;Issue: {time_create}\u0026#34;\rws[\u0026#34;I2\u0026#34;].font = Font(italic=True)\r# Add Total Profit Data to Sheet2\rfor row_data in data_profit:\rws2.append(row_data)\r# Create Total Profit Chart\rchart = BarChart()\rchart.title = \u0026#34;Total Profit Chart by Day\u0026#34;\rchart.width = 16\rchart.height = 10\rchart.x_axis.title = \u0026#34;Day\u0026#34;\rchart.y_axis.title = \u0026#34;Profit ($)\u0026#34;\rdata_range = Reference(ws2, min_col=2, max_col=2, min_row=1, max_row=len(data_profit))\rlabels = Reference(ws2, min_col=1, min_row=1, max_row=len(data_profit))\rchart.add_data(data_range)\rchart.set_categories(labels)\rchart.graphical_properties = shapes.GraphicalProperties()\rchart.graphical_properties.line.noFill = True\rchart.style = 8\rchart.legend = None\r# Add Total Profit Chart to Sheet1\rws.add_chart(chart, \u0026#34;A6\u0026#34;)\r# Create Title Top 10 Product Table\rws[\u0026#34;B29\u0026#34;] = \u0026#34;Top 10 Products\u0026#34;\rws[\u0026#34;B29\u0026#34;].font = Font(size=18, bold=True)\rws[\u0026#34;B29\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\rws.merge_cells(\u0026#34;B29:D29\u0026#34;)\r# Create Title Top 10 Staff Table\rws[\u0026#34;G29\u0026#34;] = \u0026#34;Top 10 Staffs\u0026#34;\rws[\u0026#34;G29\u0026#34;].font = Font(size=18, bold=True)\rws.merge_cells(\u0026#34;G29:I29\u0026#34;)\rws[\u0026#34;G29\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\r# Format Header Table\rcell_format = {\r\u0026#34;B31\u0026#34;: [\u0026#34;id\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;B31\u0026#34;, 2],\r\u0026#34;C31\u0026#34;: [\u0026#34;Product\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;C31\u0026#34;, 1.1],\r\u0026#34;D31\u0026#34;: [\u0026#34;Total_Profit\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;D31\u0026#34;, 1.1],\r\u0026#34;G31\u0026#34;: [\u0026#34;id\u0026#34;, \u0026#34;G\u0026#34;, \u0026#34;G31\u0026#34;, 2],\r\u0026#34;H31\u0026#34;: [\u0026#34;Staff\u0026#34;, \u0026#34;H\u0026#34;, \u0026#34;H31\u0026#34;, 1.5],\r\u0026#34;I31\u0026#34;: [\u0026#34;Total_Profit\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;I31\u0026#34;, 1.1]\r}\rthin_border = Border(left=Side(style=\u0026#34;thin\u0026#34;),\rright=Side(style=\u0026#34;thin\u0026#34;),\rtop=Side(style=\u0026#34;thin\u0026#34;),\rbottom=Side(style=\u0026#34;thin\u0026#34;))\rfor cell, cell_value in cell_format.items():\rws[f\u0026#34;{cell}\u0026#34;] = f\u0026#34;{cell_value[0]}\u0026#34;\rws[f\u0026#34;{cell}\u0026#34;].font = Font(size=12, bold=True)\rws[f\u0026#34;{cell}\u0026#34;].fill = PatternFill(start_color=\u0026#34;0abde3\u0026#34;, end_color=\u0026#34;0abde3\u0026#34;, fill_type=\u0026#34;solid\u0026#34;)\rws[f\u0026#34;{cell}\u0026#34;].border = thin_border\rws[f\u0026#34;{cell}\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\rws.column_dimensions[f\u0026#34;{cell_value[1]}\u0026#34;].width = len(str(ws[f\u0026#34;{cell_value[2]}\u0026#34;].value)) * cell_value[3]\r# Insert Value Top 10 Product Table\rfor row_idx, row in enumerate(data_product, 32):\rfor col_idx, value in enumerate(row, 2):\rcol_letter = get_column_letter(col_idx)\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;] = str(value)\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;].border = thin_border\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\r# Insert Value Top 10 Staff Table\rfor row_idx, row in enumerate(data_staff, 32):\rfor col_idx, value in enumerate(row, 7):\rcol_letter = get_column_letter(col_idx)\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;] = str(value)\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;].border = thin_border\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\r# Save Excel\rws.page_setup.orientation = ws.ORIENTATION_PORTRAIT\rws.print_options.horizontalCentered = True\rwb.save(f\u0026#34;/tmp/{report_name}.xlsx\u0026#34;)\r# Upload pdf file to S3\rurl = upload_report_to_S3(f\u0026#34;/tmp/{report_name}.xlsx\u0026#34;, f\u0026#34;{s3_bucket_result}\u0026#34;)\r# Send Presigned URL to send User to Download Report\rsns_send_report_url(report_name, url)\rreturn report_name, url\rdef upload_report_to_S3(file_name, s3_bucket_result, object_name=None):\r# If S3 object_name was not specified, use file_name\rif object_name is None:\robject_name = os.path.basename(file_name)\r# Upload the file to S3 Bucket\rs3_client = boto3.client(\u0026#34;s3\u0026#34;)\rs3_client.upload_file(file_name, s3_bucket_result, object_name)\r# Create Presigned URL to send into User to Download Report\rurl = s3_client.generate_presigned_url(\u0026#34;get_object\u0026#34;, Params={\u0026#34;Bucket\u0026#34;: s3_bucket_result, \u0026#34;Key\u0026#34;: object_name},\rExpiresIn=604800)\rreturn url\rdef sns_send_report_url(report_name, url):\rsns_client = boto3.client(\u0026#34;sns\u0026#34;)\rmessage = f\u0026#34;{report_name} has been successfully created!\\n\\nThis is URL to Download Report : {url}\u0026#34;\r# Send message to SNS topic\rresponse = sns_client.publish(\rTopicArn=sns_topic_arn,\rSubject=report_name,\rMessage=message,\rMessageStructure=\u0026#34;string\u0026#34;\r)\rdef lambda_handler(event, context):\rheaders = event[\u0026#39;headers\u0026#39;]\rorigin = f\u0026#39;https://{s3_bucket_web}.s3.ap-southeast-1.amazonaws.com\u0026#39;\rresponse_headers = {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: origin\r}\rif headers.get(\u0026#39;origin\u0026#39;) != None and headers.get(\u0026#39;origin\u0026#39;) == origin or headers.get(\u0026#39;origin\u0026#39;) == \u0026#39;event-bridge\u0026#39;:\rif headers.get(\u0026#39;origin\u0026#39;) == origin:\rmonth = json.loads(event[\u0026#39;body\u0026#39;])[\u0026#39;month\u0026#39;]\ryear = json.loads(event[\u0026#39;body\u0026#39;])[\u0026#39;year\u0026#39;]\rif headers.get(\u0026#39;origin\u0026#39;) == \u0026#39;event-bridge\u0026#39;:\rmonth = (datetime.date.today().replace(day=1) - datetime.timedelta(days=1)).month\ryear = (datetime.date.today().replace(day=1) - datetime.timedelta(days=1)).year\rreport_name, url = create_report(month, year)\rresponse = {\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;headers\u0026#39;: response_headers,\r\u0026#39;body\u0026#39;:\rjson.dumps({\r\u0026#39;status\u0026#39;: \u0026#39;Success\u0026#39;,\r\u0026#39;report_name\u0026#39;: report_name,\r\u0026#39;url\u0026#39;: url\r}),\r}\rreturn response\rreturn {\r\u0026#39;statusCode\u0026#39;: 403,\r\u0026#39;headers\u0026#39;: response_headers,\r\u0026#39;body\u0026#39;: json.dumps({\u0026#39;status\u0026#39;: \u0026#39;Forbidden!\u0026#39;}),\r} Chọn Deploy, hoàn thành cập nhật Code cho Lambda Function Chức năng của các Function trong Lambda Function:\nget_data: Kết nối với Aurora PostgreSQL để lấy dữ liệu\ncreate_report: Nhận dữ liệu từ hàm get_data, tạo Excel Report\nupload_report_to_S3: Upload Report đến S3 và tạo Presigned URL\nsns_send_report_url: Gửi mail thông báo và Presigned URL đến User để Download Report\nlambda_handler: Xử lý sự kiện đầu vào từ Static Website hoặc EventBridge, có logic cho phù hợp để tính toán 2 month and year làm input cho hàm create_report\n"
},
{
	"uri": "/vi/4-lambda/",
	"title": "Tạo Lambda Function",
	"tags": [],
	"description": "",
	"content": "\nTrong chương này, chúng ta sẽ tìm hiểu các bước xây dựng 1 Lamda Function hoàn chỉnh.\nĐể đảm bảo Runtime cho Lambda Function được hỗ trợ lâu dài, chúng ta sẽ chọn Python 3.11\nNội dung 4.1 Tạo IAM Role cho Lambda\n4.2 Cài đặt Python Dependencies\n4.3 Tạo Lambda Layer\n4.4 Tạo Lambda Function\n4.5 Cấu hình Lambda Function\n"
},
{
	"uri": "/vi/4-lambda/4.5-lambdaconfig/",
	"title": "Cấu hình Lambda Function",
	"tags": [],
	"description": "",
	"content": "Tại giao diện của Lambda Function monthly-sales-report-lambda, chọn Configuration\nGeneral Configuration Chọn General Configuration, sau đó chọn Edit Tại trang Basic settings Tại mục Memory, nhập 256 Tại mục Timeout, chọn 10s Chọn Save Hoàn thành update General Configuration Enviroment variables Chọn Enviroment variables, sau đó chọn Edit Tại trang Edit environment variables, chọn Add environment variable\nLần lượt thêm các variable theo bảng sau. Hãy thay đổi thông tin cho phù hợp với bạn Key Value Note Reference (Chapter) postgres_dbname sales Database name 2.1 postgres_user postgres Database user 2.1 postgres_password postgres Database password 2.1 postgres_host aurora-postgresql.cluster-cdw3n7fovj7h.ap-southeast-1.rds.amazonaws.com Aurora PostgreSQL Endpoint 2.1 s3_bucket_result monthly-sales-report-result S3 Bucket to save Report 1.6 s3_bucket_web monthly-sales-report-web S3 Bucket to save Static Website 1.6 sns_topic_arn arn:aws:sns:ap-southeast-1:\u0026lt;CHANGE_YOUR_ACCOUNT_ID_HERE\u0026gt;:monthly-sales-report-topic SNS Topic ARN 3 Hoàn thành Edit environment variables Gán VPC cho Lambda Chọn VPC, sau đó chọn Edit Tại trang Edit VPC Tại mục VPC, chọn FCJ-vpc Tại mục Subnets, chọn FCJ-subnet-private1-ap-southeast-1a và FCJ-subnet-private2-ap-southeast-1b Tại mục Security groups, chọn Lambda-Security-Group Chọn Save Hoàn thành Gán VPC cho Lambda Khi đặt Lambda vào VPC, thì Lambda không thể kết nối Internet được.\nTrong bài workshop này chúng ta đã tạo:\n+S3 Gateway Endpoint để Lambda tương tác với S3 thông qua Endpoint này\n+SNS Interface Endpoint để Lambda tương tác với SNS thông qua Endpoint này\nDo đó, tất cả lưu lượng đều trong phạm vi VPC không public ra ngoài Internet. Đây là một best practise để bảo an toàn cho hệ thống của bạn.\n"
},
{
	"uri": "/vi/5-apigateway/",
	"title": "Tạo API Gateway",
	"tags": [],
	"description": "",
	"content": "\nTrong chương này, chúng ta sẽ tìm hiểu các bước xây dựng 1 API Gateway\nNội dung 5.1 Tạo API Gateway\n5.2 Tạo Resource, Method\n5.3 Deploy API\n"
},
{
	"uri": "/vi/1-preparation/1.5-createrole/",
	"title": "Tạo IAM Role cho EC2",
	"tags": [],
	"description": "",
	"content": "Tạo IAM Role cho EC2 Truy cập Giao diện quản trị dịch vụ IAM Chọn Roles Chọn Create Role Tại trang Select trusted entity Tại mục Trusted entity type, chọn AWS service Tại mục Service or use case, chọn EC2 Cuộn chuột xuống dưới cùng, chọn Next Tại trang Add permissions Tại mục Permissions policies, tích chọn AdministratorAccess Cuộn chuột xuống dưới cùng, chọn Next Tại trang Name, review, and create Tại mục Role name, nhập Admin-Role Kiểm tra lại thông tin, sau đó chọn Create Role Modify IAM Role cho EC2 Truy cập Giao diện quản trị dịch vụ EC2 Chọn FCJ-Instance Chọn Actions, chọn Security, sau đó chọn Modify IAM Role Tại trang Modify IAM Role Tại mục IAM Role, chọn Admin-Role đã được tạo ở bước trước Chọn Update IAM Role Thành công Modify IAM Role cho FCJ-Instance Lưu lại giá trị Public IPv4 address để chuẩn bị cho bước kế tiếp\n"
},
{
	"uri": "/vi/6-eventbridge/",
	"title": "Tạo EventBridge Scheduler",
	"tags": [],
	"description": "",
	"content": "\nChương này chúng ta sẽ tiến hành các bước để tạo một EventBridge Scheduler để trigger việc tạo báo cáo tự động vào lúc 08:00 ngày 1 hằng tháng (UTC+07:00)\nNghĩa là báo cáo tháng trước sẽ được tạo vào ngày 1 của tháng sau lúc 08:00\nTrình tự thực hiện Truy cập Giao diện quản trị dịch vụ Amazon EventBridge Chọn Schedules Chọn Create schedule Tại trang Specify schedule detail Tại phần Schedule name and description Tại mục Schedule name, nhập monthly-sales-report-event Tại phần Schedule pattern Tại mục Occurrence, chọn Recurring schedule Tại mục Schedule type, chọn Cron-based schedule Tại mục Cron expression, nhập 0 8 1 * ? * (tham khảo hình bên dưới) Tại mục Flexible time window, chọn Off Cuộn chuột xuống dưới cùng, chọn Next Tại trang Select target Tại phần Target detail Tại mục Schedule name, chọn AWS Lambda Invoke Tại phần Invoke Tại mục Lambda function, chọn monthly-sales-report-lambda Tại mục payload, nhập {\u0026ldquo;headers\u0026rdquo;: {\u0026ldquo;origin\u0026rdquo;: \u0026ldquo;event-bridge\u0026rdquo;}}\n(Được thiết kế để phù hợp với logic đầu vào của hàm lambda_handler) Chọn Next, Next, tất cả để mặc định, sau đó chọn Create schedule Hoàn thành tạo EventBridge Scheduler để trigger tự động xuất báo cáo vào lúc 08:00 ngày 1 hàng tháng (UTC+07:00) "
},
{
	"uri": "/vi/1-preparation/1.6-creates3bucket/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Trình tự thực hiện Chúng ta tiến hành thực hiện SSH vào EC2 Instance FCJ-Instance\nỞ đây chúng ta dùng MobaXterm. Bạn có thể xem chi tiết hơn Cách kết nối EC2 Instance bằng MobaXterm Chọn Session Chọn SSH Tại mục Remote host, nhập Public IPv4 Address đã được lưu lại ở bước 1.5 Chọn Specify username, nhập ec2-user Chọn Advange SSH Settings Chọn use private key, sau đó truy xuất đường dẫn đến file FCJ-keypair.pem đã lưu ở bước 1.4 Chọn OK Kết nối thành công như hình bên dưới\nThực hiện các câu lệnh để tiến hành tạo các S3 Bucket aws s3api create-bucket --bucket monthly-sales-report-layer --region ap-southeast-1 --create-bucket-configuration LocationConstraint=ap-southeast-1\raws s3api create-bucket --bucket monthly-sales-report-result --region ap-southeast-1 --create-bucket-configuration LocationConstraint=ap-southeast-1\raws s3api create-bucket --bucket monthly-sales-report-web --region ap-southeast-1 --create-bucket-configuration LocationConstraint=ap-southeast-1 Trong đó: monthly-sales-report-layer : Bucket để lưu các Zip file dùng để tạo các Lambda Layer monthly-sales-report-result : Bucket để lưu các Report được tạo nhằm mục đích lữu trữ lâu dài monthly-sales-report-web : Bucket để lưu Static Website Nếu bạn gặp lỗi tạo Bucket with the same name already exists do tên của S3 Bucket là duy nhất trên toàn thế giới, bạn phải lựa chọn tên cho phù hợp.\nLưu lại các tên này để chuẩn bị thông tin cho các tài nguyên liên quan ở những bước kế tiếp.\nTruy cập Giao diện quản trị dịch vụ S3 Chọn Buckets, chúng ta sẽ thấy 3 Bucket chúng ta vừa tạo "
},
{
	"uri": "/vi/7-staticwebsite/",
	"title": "Tạo Static Website",
	"tags": [],
	"description": "",
	"content": "Trong chương này, chúng ta sẽ cùng tìm hiểu các bước đế tạo 1 Static Website trên S3\nNội dung 7.1 Upload Website Into S3\n7.2 Public Static Website\n7.3 Kiểm tra Website\n"
},
{
	"uri": "/vi/8-check/",
	"title": "Kiểm tra hoạt động",
	"tags": [],
	"description": "",
	"content": "Trong chương này, chúng ta sẽ cùng kiểm tra hoạt động của ứng dụng mà chúng ta đã xây dựng thông qua 2 cách:\nTừ Static Website Từ EventBridge Nội dung 8.1 Từ Static Website\n8.2 Từ EventBridge\n"
},
{
	"uri": "/vi/9-cleanup/",
	"title": "Dọn Dẹp Tài Nguyên",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tiến hành các bước sau để xóa các tài nguyên chúng ta đã tạo trong bài workshop này.\nXóa Aurora PostgreSQL Truy cập Giao diện quản trị dịch vụ RDS\nChọn Databases, chọn aurora-postgresql-instance-1 Chọn Actions, sau đó chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Chọn aurora-postgresql Chọn Actions, sau đó chọn Delete Bỏ chọn Create final snapshot, tích chọn I acknowledge\u0026hellip; Nhập delete me, sau đó chọn Delete DB Cluster để tiến hành Delete Sau khi delete Aurora PostgreSQL, chọn Subnet groups Chọn 2 DB Subnet groups đã tạo, sau đó chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Xóa SNS Topic Truy cập Giao diện quản trị dịch vụ SNS\nChọn Topics, chọn monthly-sales-report-topic, sau đó chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Xóa EvenBridge Scheduler Truy cập Giao diện quản trị dịch vụ Amazon EvenBridge\nChọn Schedulers, chọn monthly-sales-report-event, sau đó chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Xóa Lambda Function Truy cập Giao diện quản trị dịch vụ Lambda\nChọn Functions, chọn monthly-sales-report-lambda Chọn Actions, sau đó chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Xóa Lambda Layer Chọn Layers, chọn report-layer, sau đó chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Xóa S3 Buckets Truy cập Giao diện quản trị dịch vụ S3\nChọn Buckets, chọn monthly-sales-report-layer Chọn Empty Thực hiện xác nhận (nếu có) để tiến hành Empty Chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Thực hiện tương tự đối với 2 Bucket monthly-sales-report-result và monthly-sales-report-web Xóa API Gateway Truy cập Giao diện quản trị dịch vụ API Gateway\nChọn APIs, chọn monthly-sales-report-api, sau đó chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Xóa IAM Role Truy cập Giao diện quản trị dịch vụ IAM\nChọn Roles, chọn Admin-Role, Lambda-Report-Role và Role dạng Amazon-EventBridge-Scheduler-LAMBDA-[Hash], sau đó chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Chọn Policies, tìm kiếm và chọn Lambda-Report-Policy, sau đó chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Thực hiện tương tự đối với các Policies dạng Amazon-EventBridge-Scheduler-LAMBDA-[Hash] Xóa EC2 Instances Truy cập Giao diện quản trị dịch vụ EC2\nChọn Instances, chọn FCJ-Instance Chọn Instance state, chọn Terminate instance Thực hiện xác nhận (nếu có) để tiến hành Terminate Xóa Key pairs Chọn Key Pairs, chọn FCJ-keypair Chọn Actions, sau đó chọn Delete Thực hiện xác nhận (nếu có) để tiến hành Delete Xóa SNS Interface Endpoint Truy cập Giao diện quản trị dịch vụ VPC\nChọn Endpoints, chọn SNS-Endpoint Chọn Actions, sau đó chọn Delete VPC endpoints Thực hiện xác nhận (nếu có) để tiến hành Delete Chờ cho đến khi SNS-Endpoint xóa xong Xóa DB-Security-Group (Sau khi đã xóa Aurora PostgreSQL) Chọn Security Groups, chọn DB-Security-Group Chọn Actions, sau đó chọn Delete security groups Thực hiện xác nhận (nếu có) để tiến hành Delete Lần lượt xóa SNS-Endpoint-Security-Group, Lambda-Security-Group, EC2-Security-Group theo các bước tương tự Xóa VPC Chọn Your VPCs, chọn FCJ-vpc Chọn Actions, sau đó chọn Delete VPC Thực hiện xác nhận (nếu có) để tiến hành Delete "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]