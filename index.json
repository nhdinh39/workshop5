[
{
	"uri": "/5-apigateway/5.1-apigateway/",
	"title": "Create API Gateway",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access API Gateway Console Select APIs In the REST API field, select Build At the Create REST API page Select New API In the API name field, enter monthly-sales-report-api In the API endpoint type field, select Regional Select Create API Successfully created REST API "
},
{
	"uri": "/2-aurorapostgres/2.1-createpostgres/",
	"title": "Create Aurora PostgreSQL",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access RDS Console Select Databases Select Create Database At the Create database page In the Choose a database creation method section In the Choose a database creation method field, select Standard create In the Engine options section In the Engine type field, select Aurora (PostgreSQL Compatible) In the Available versions field, select Aurora PostgreSQL (Compatible with PostgreSQL 15.4) In the Settings section In the DB cluster identifier field, enter aurora-postgresql In the Master username field, enter postgres In the Master password field, enter postgres In the Confirm master password field, enter postgres In the Instance configuration section Select Burstable classes (includes t classes), then select db.t3.medium In the Availability \u0026amp; durability section Select Don\u0026rsquo;t create an Aurora Replica In the Connectivity section In the Compute resource field, select Don\u0026rsquo;t connect to an EC2 compute resource In the Virtual private cloud (VPC) field, select FCJ-vpc In the DB subnet group field, select Create new DB Subnet Group In the VPC security group (firewall) field, select Choose existing, then select DB-Security-Group Scroll down to the bottom, select Create database, the DB creation process begins At Database page Wait until status of aurora-postgresql changes to available (about 15 minutes) Select aurora-postgresql, save the Endpoint value of Writer to prepare for the next step "
},
{
	"uri": "/4-lambda/4.1-createroles/",
	"title": "Create IAM Role for Lambda",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access IAM Console Select Policies Select Create Policy Select JSON Copy and paste the following JSON code to define permissions for the Policy Replace \u0026lt;CHANGE_YOUR_BUCKET_SAVE_REPORT_RESULT\u0026gt; with the Bucket name to save the Report saved in step 1.6 Replace \u0026lt;CHANGE_YOUR_SNS_TOPIC_ARN\u0026gt; with SNS Topic ARN saved in chapter 3 Select Next {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;s3:PutObject\u0026#34;,\r\u0026#34;s3:GetObject\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::\u0026lt;CHANGE_YOUR_BUCKET_SAVE_REPORT_RESULT\u0026gt;/*\u0026#34;\r},\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;sns:Publish\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;\u0026lt;CHANGE_YOUR_SNS_TOPIC_ARN\u0026gt;\u0026#34;\r},\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;logs:CreateLogGroup\u0026#34;,\r\u0026#34;logs:CreateLogStream\u0026#34;,\r\u0026#34;logs:PutLogEvents\u0026#34;,\r\u0026#34;ec2:CreateNetworkInterface\u0026#34;,\r\u0026#34;ec2:DescribeNetworkInterfaces\u0026#34;,\r\u0026#34;ec2:DeleteNetworkInterface\u0026#34;,\r\u0026#34;ec2:AssignPrivateIpAddresses\u0026#34;,\r\u0026#34;ec2:UnassignedPrivateIpAddresses\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r} In the Policy name field, enter Lambda-Report-Policy Select Create Policy Permissions granted to policy Lambda-Report-Policy\n+Allowed PutObject, GetObject of S3 Bucket monthly-sales-report-result\n+Allowed to Publish for SNS Topic monthly-sales-report-topic\n+Get basic permissions to record log and assign VPC\nAt IAM Console Select Roles Select Create Role At Select trusted entity page Select AWS service In the Service or use case field, select Lambda Select Next At Add permissions page In the search box, enter Lambda-Report-Policy created in the previous step Select Lambda-Report-Policy Select Next At page Name, review, and create In the Role name field, enter Lambda-Report-Role Check the information again, then select Create Role "
},
{
	"uri": "/1-preparation/1.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access VPC Console Select Your VPC Select Create VPC At Create VPC page In the Resources field, select VPC and more In the Name tag field, enter FCJ In the IPv4 CIDR field, enter 10.10.0.0/16 In the Number of public subnets field, select 2 In the Number of private subnets field, select 2 In the VPC endpoints field, select S3 Gateway Select Create VPC Wait until VPC and components are created Select View VPC Successfully create VPC At the VPC interface Select Subnets Select FCJ-subnet-public1-ap-southeast-1a Select Actions, then select Edit subnet settings At Edit subnet settings page In the Auto-assign IP settings field, click Enable auto-assign public IPv4 address Select Save Do the same for FCJ-subnet-public2-ap-southeast-1b "
},
{
	"uri": "/8-check/8.1-website/",
	"title": "From Static Website",
	"tags": [],
	"description": "",
	"content": "Execution sequence At the Static Website interface opened in step 7.3 Keep Month and Year by default, or you can choose another Month or Year according to your preference Select Generate Report Wait a few seconds, we receive the message {Month}-{Year}-Monthly-Sales-Report has been successfully created! and the link Download Report Select Download Report, then try to open it with Excel, we get the report as shown below Try Ctrl + P Try accessing gmail, we receive an email with the title {Month}-{Year}-Monthly-Sales-Report Try clicking to see, we have the content as shown below, including Presigned URL to Download Report You can choose another Month or Year on Static Website to check further.\nSo our application has worked well with testing from Static Website\n"
},
{
	"uri": "/",
	"title": "Generate Monthly Sales Report with Serverless Architecture",
	"tags": [],
	"description": "",
	"content": "Generate Monthly Sales Report with Serverless Architecture In this workshop, we will learn about the steps to take step by step to build a Serverless Architecture for the purpose of Generate Monthly Sales Report\nArchitecture of the workshop Report image Content 1. Prepare Resources\n2. Create Aurora PostgreSQL\n3. Create SNS Topic\n4. Create Lambda Function\n5. Create API Gateway\n6. Create EventBridge Scheduler\n7. Create Static Website\n8. Test Operation\n9. Clean Up Resources\n"
},
{
	"uri": "/1-preparation/",
	"title": "Prepare Resources",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will perform:\nCreate 1 VPC with 2 Public Subnets, 2 Public Subnets, S3 Gateway Endpoint Create 4 Security Groups for EC2 Instance, Lambda Function, SNS Interface Endpoint and Aurora PostgreSQL Create SNS Interface Endpoint Create IAM Role for EC2 Instance Create 3 S3 Buckets Note: All resources in this workshop use Region Singapore (ap-southeast-1) Content 1.1 Create VPC\n1.2 Create Security Group\n1.3 Create SNS Interface Endpoint\n1.4 Create EC2 Instance\n1.5 Create IAM Role for EC2\n1.6 Create S3 Buckets\n"
},
{
	"uri": "/7-staticwebsite/7.1-upload/",
	"title": "Upload Website Into S3",
	"tags": [],
	"description": "",
	"content": "Execution sequence COPY the following CODE \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Report Generator\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; h1, .container, .button, #response, .active { margin-left: 20px; } body { font-family: Arial, sans-serif; } .container { display: flex; flex-direction: column; margin-bottom: 20px; } .label { font-weight: bold; margin-bottom: 5px; } .dropdown { width: 200px; margin-bottom: 20px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; } .button { cursor: pointer; background-color: #19d41f; color: white; padding: 15px 30px; border: none; border-radius: 8px; font-size: 18px; transition: background-color 0.3s ease; } .button:hover { background-color: #3f9e44; } #response { margin-top: 20px; font-size: 18px; } .loading { display: none; } .active { display: block; margin-top: 20px; font-size: 18px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Monthly Sales Report Generator\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;Select Month:\u0026lt;/div\u0026gt; \u0026lt;select id=\u0026#34;month\u0026#34; class=\u0026#34;dropdown\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;Select Year:\u0026lt;/div\u0026gt; \u0026lt;select id=\u0026#34;year\u0026#34; class=\u0026#34;dropdown\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;button\u0026#34; onclick=\u0026#34;callApi()\u0026#34;\u0026gt;Generate Report\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;loading\u0026#34; class=\u0026#34;loading\u0026#34;\u0026gt;Loading...\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;response\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function populateDropdowns() { var monthDropdown = document.getElementById(\u0026#34;month\u0026#34;); var yearDropdown = document.getElementById(\u0026#34;year\u0026#34;); for (var i = 1; i \u0026lt;= 12; i++) { var option = document.createElement(\u0026#34;option\u0026#34;); option.value = i; option.text = i; monthDropdown.appendChild(option); } for (var j = 2022; j \u0026lt;= 2030; j++) { var option = document.createElement(\u0026#34;option\u0026#34;); option.value = j; option.text = j; yearDropdown.appendChild(option); } } function callApi() { document.getElementById(\u0026#34;response\u0026#34;).innerHTML = \u0026#34;\u0026#34;; document.getElementById(\u0026#34;loading\u0026#34;).classList.add(\u0026#34;active\u0026#34;); var month = document.getElementById(\u0026#34;month\u0026#34;).value; var year = document.getElementById(\u0026#34;year\u0026#34;).value; var apiUrl = \u0026#34;\u0026lt;CHANGE_YOUR_API_URL_HERE\u0026gt;/report\u0026#34;; fetch(apiUrl, { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }, body: JSON.stringify({ month: month, year: year }) }) .then(response =\u0026gt; response.json()) .then(data =\u0026gt; { document.getElementById(\u0026#34;loading\u0026#34;).classList.remove(\u0026#34;active\u0026#34;); displayResult(data); }) .catch(error =\u0026gt; { document.getElementById(\u0026#34;loading\u0026#34;).classList.remove(\u0026#34;active\u0026#34;); displayError(\u0026#34;Error: \u0026#34; + error.message); }); } function displayResult(data) { var responseDiv = document.getElementById(\u0026#34;response\u0026#34;); responseDiv.innerHTML = \u0026#34;\u0026#34;; var status = data.status; var nameReport = data.report_name; var nameReportDiv = document.createElement(\u0026#34;div\u0026#34;); nameReportDiv.innerHTML = `\u0026lt;b\u0026gt;${nameReport}\u0026lt;/b\u0026gt;` + \u0026#34; has been successfully created!\u0026#34;; responseDiv.appendChild(nameReportDiv); if (status === \u0026#34;Success\u0026#34;) { var downloadLink = document.createElement(\u0026#34;a\u0026#34;); downloadLink.href = data.url; downloadLink.download = `${nameReport}.xlsx`; downloadLink.innerText = \u0026#34;Download Report\u0026#34;; responseDiv.appendChild(downloadLink); } else { displayError(\u0026#34;Error: \u0026#34; + data.message); } } function displayError(message) { var responseDiv = document.getElementById(\u0026#34;response\u0026#34;); responseDiv.innerHTML = \u0026#34;\u0026lt;span style=\u0026#39;color: red;\u0026#39;\u0026gt;\u0026#34; + message + \u0026#34;\u0026lt;/span\u0026gt;\u0026#34;; } populateDropdowns(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Return to the MobaXterm window Create a file index.html vim index.html Paste the copied CODE and replace \u0026lt;CHANGE_YOUR_API_URL_HERE\u0026gt; with the Invoke URL saved in step 5.3 Upload file index.html to S3 Bucket monthly-sales-report-web aws s3 cp index.html s3://monthly-sales-report-web monthly-sales-report-web is the S3 Bucket name to store the Static Website created in step 1.6. If your Bucket name is different, you must change it accordingly.\nAccess S3 Console Select Bucket, select monthly-sales-report-web, we see the file index.html has just appeared "
},
{
	"uri": "/2-aurorapostgres/",
	"title": "Create Aurora PostgreSQL",
	"tags": [],
	"description": "",
	"content": "\nIn this chapter, we will learn about:\nHow to create 1 Aurora PostgreSQL Cluster How to install PostgreSQL Client and use it to connect to Aurora PostgreSQL How to Restore Example Data with pg_restore command Content 2.1 Create Aurora PostgreSQL\n2.2 Install PostgreSQL Client\n2.3 Restore Example Data\n"
},
{
	"uri": "/5-apigateway/5.2-resouremethod/",
	"title": "Create Resource, Method",
	"tags": [],
	"description": "",
	"content": "Execution sequence At the monthly-sales-report-api interface Select Create resource At Create resource page In the Resource name field, enter report Check CORS (Cross Origin Resource Sharing) Select Create resource Successfully created Resource for REST API Select Create method At Create method page In the Method type field, select POST In the Intergration type field, select Lambda function Select Lambda proxy integration In the Lambda function field, select monthly-sales-report-lambda Select Create method Successfully created Method for Resource of REST API This means that when the API is called, the API Gateway will call the Lambda Function monthly-sales-report-lambda\nReturn to the Resource report interface, select Enable CORS At Enable CORS page Check OPTION and POST Select Save "
},
{
	"uri": "/1-preparation/1.2-createsg/",
	"title": "Create Security Group",
	"tags": [],
	"description": "",
	"content": "Execution sequence In the VPC interface Select Security Group Select Create security group Create a Security Group for EC2 Instance In the Security group name field, enter EC2-Security-Group In the Description field, enter Security Group for FCJ-Instance In the VPC field, click the X to select FCJ-vpc In the Inbound rule field, select Add rule to add 1 Inbound Rule Type select SSH, Source select Anywhere (0.0.0.0/0) Scroll down to the bottom, select Create security group Do the same to create Security for Lambda Function, SNS Interface Endpoint and Aurora PostgreSQL Create Security Group for Lambda Function In the Security group name field, enter Lambda-Security-Group In the Description field, enter Security Group for Lambda In the VPC field, click the X to select FCJ-vpc Scroll down to the bottom, select Create security group Create Security Group for SNS Interface Endpoint In the Security group name field, enter SNS-Endpoint-Security-Group In the Description field, enter Security Group for SNS Interface Endpoint In the VPC field, click the X to select FCJ-vpc In the Inbound rule field, select Add rule to add 1 Inbound Rules Type select All traffic, Source select Lambda-Security-Group Scroll down to the bottom, select Create security group Create Security Group for Aurora PostgreSQL In the Security group name field, enter DB-Security-Group In the Description field, enter Security Group for Aurora PostgreSQL In the VPC field, click the X to select FCJ-vpc In the Inbound rule field, select Add rule to add 2 Inbound Rules Type select PostgreSQL, Source select EC2-Security-Group Type select PostgreSQL, Source select Lambda-Security-Group Scroll down to the bottom, select Create security group Successfully created 4 Security Groups "
},
{
	"uri": "/8-check/8.2-eventbridge/",
	"title": "From EventBridge",
	"tags": [],
	"description": "",
	"content": "Due to EventBridge Scheduler we have designed an automatic trigger on the 1st of every month.\nSo we will perform this test through the Test event function of Lambda Function\nExecution sequence At the Lambda Function monthly-sales-report-lambda interface Select Test Select Create new event In the Event JSON field, enter {\u0026quot;headers\u0026quot;: {\u0026quot;origin\u0026quot;: \u0026quot;event-bridge\u0026quot;}}, similar to the payload we designed in EventBridge Scheduler Select Save Select Test, we see a message of successful execution Click to see details executing log Try accessing gmail, we receive an email with the title {Month}-{Year}-Monthly-Sales-Report. The time to conduct this workshop is December.\nSo in the image is Nov-2023-Monthly-Sales-Report designed by the Lambda Function that will create the report of the previous month if the trigger is in the form of Event Bridge. Try clicking to see, we have the content as shown below, including Presigned URL to Download Report Select Download Report Try opening it with Excel Report file you just downloaded, we will get the report as shown below Try Ctrt + P Access S3 Console Select Buckets, select monthly-sales-report-result we see the reports we have created are saved here Presigned URL is only valid for 1 week from the time the report is generated. In case you want to review the report after a period of time.\nYou can go to S3 Bucket monthly-sales-report-result as above to download in case necessary.\nCongratulations, we have successfully completed the workshop. Perform resource cleanup to avoid additional costs.\n"
},
{
	"uri": "/2-aurorapostgres/2.2-installclient/",
	"title": "Install PostgreSQL Client",
	"tags": [],
	"description": "",
	"content": "Execution sequence Return to the MobaXterm window Execute the following command to install PostgreSQL Client sudo dnf install postgresql15 -y Execute the following command to log in to Aurora PostgreSQL DB, by default it will go to postgres database Change \u0026lt;CHANGE_YOUR_AURORA_POSTGRESQL_ENDPOINT_HERE\u0026gt; with Aurora PostgreSQL Endpoint we saved in step 2.1 Enter password postgres to log in psql -h \u0026lt;CHANGE_YOUR_AURORA_POSTGRESQL_ENDPOINT_HERE\u0026gt; -p 5432 -U postgres Execute the command to print the current login information, including user, database name, host, port SELECT current_user, current_database(), :\u0026#39;HOST\u0026#39; host, inet_server_port() port; Check existing Databases SELECT dataname FROM pg_database; Proceed to create Database sales CREATE DATABASE sales; Check the existing Database, now there are more sales SELECT dataname FROM pg_database; Exit Aurora PostgreSQL exit "
},
{
	"uri": "/4-lambda/4.2-dependencies/",
	"title": "Install Python Dependencies",
	"tags": [],
	"description": "",
	"content": "Install Python Return to the MobaXterm interface\nInstall Python 3.11 and package manager Pip sudo dnf install python3.11 -y\rcurl -sS https://bootstrap.pypa.io/get-pip.py | python3.11 Install Python Dependencies Create python folder mkdir python Install the Python Dependencies necessary for the workshop into the newly created python folder In which: psycopg2-binary: Library for python to interact with PostgreSQL openpyxl: Library for python to interact with Excel pytz: Library for python to standardize time zones python3.11 -m pip install psycopg2-binary -t python/\rpython3.11 -m pip install openpyxl -t python/\rpython3.11 -m pip install pytz -t python/ Create Zip file of Dependencies and Upload to S3 Bucket Create a zip file named monthly-sales-report-layer.zip from the python folder containing Python Denpendencies sudo zip -r monthly-sales-report-layer.zip python Upload monthly-sales-report-layer.zip to S3 Bucket monthly-sales-report-layer aws s3 cp monthly-sales-report-layer.zip s3://monthly-sales-report-layer monthly-sales-report-layer is the S3 Bucket name to store the Zip files used to create the Lambda Layers created in step 1.6. If your Bucket name is different, you must change it accordingly.\nAccess S3 Console\nSelect Buckets, select monthly-sales-report-layer we see monthly-sales-report-layer.zip has just appeared Select monthly-sales-report-layer.zip, save Object URL to prepare for the next step "
},
{
	"uri": "/7-staticwebsite/7.2-public/",
	"title": "Public Static Website",
	"tags": [],
	"description": "",
	"content": "Enable Static website hosting At the S3 Bucket monthly-sales-report-web interface Select Properties Scroll down to the bottom, in the Static website hosting section, select Edit At Edit static website hosting page In the Static website hosting field, select enable In the Index document field, enter index.html Select Save changes Edit Block public access At the S3 Bucket monthly-sales-report-web interface Select Permissions In the Block public access (bucket settings) section, select Edit At Edit Block public access (bucket settings) page Uncheck Block all public access Select Save changes Enter confirm, then select Confirm to confirm Edit Bucket Policy At the Permissions interface In the Bucket policy section, select Edit Copy and paste the following Policy paragraph Replace \u0026lt;CHANGE_YOUR_BUCKET_SAVE_WEB\u0026gt; with the Bucket name to save the Static Website saved in step 1.6 {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::\u0026lt;CHANGE_YOUR_BUCKET_SAVE_WEB\u0026gt;/*\u0026#34;\r}\r]\r} Select Save changes "
},
{
	"uri": "/7-staticwebsite/7.3-check/",
	"title": "Check Website",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access S3 Console Select Bucket, select monthly-sales-report-web Select index.html Click to select Object URL The web interface as shown below means you have successfully Public Static Website Website functions:\nWhen you press the Generation Report Button, the POST method will be called to the API Gateway that we created in chapter 5, then the API Gateway will call Lambda Function to create and save Report to S3 and respond to User. At the same time, also send a notification email to the User with Presigned URL to download the Report from S3.\n"
},
{
	"uri": "/4-lambda/4.3-lambdalayer/",
	"title": "Create Lambda Layer",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access Lambda Console Select Layers Select Create layer On the Create layer page In the Name field, enter report-layer Select Upload a file from Amazon S3 In the Amazon S3 link URL field, enter the Object URL of monthly-sales-report-layer.zip saved in step 4.2 In the Compatible architectures field, select x86_64 In the Compatible runtimes field, select Python 3.11 Select Create Successfully created Lambda Layer "
},
{
	"uri": "/1-preparation/1.3-snsendpoint/",
	"title": "Create SNS Interface Endpoint",
	"tags": [],
	"description": "",
	"content": "Execution sequence In the VPC interface Select Endpoints Select Create endpoint At the Create endpoint page In the Name tag field, enter SNS-Endpoint In the Service category field, select AWS Service In the Services field, in the search box enter sns, then select sns Interface Endpoint as shown below In the VPC field, select FCJ-vpc In Subnets field, select 2 AZ and 2 Private Subnet In the Security groups field, select SNS-Endpoint-Security-Group Scroll down to the bottom, select Create endpoint Successfully created SNS Interface Endpoint "
},
{
	"uri": "/3-sns/",
	"title": "Create SNS Topic",
	"tags": [],
	"description": "",
	"content": "\nIn this step, we will Create SNS Topic and Subscription for the purpose of sending notification emails and Presigned URL when creating a Report.\nCreate SNS Topic Access Amazon SNS Console Select Topics Select Create Topic At Create Topic page In the Type field, select Standard In the Name field, enter monthly-sales-report-topic Scroll to the bottom, select Create topic Create Subscription At the newly created monthly-sales-report-topic page Select Create Subscription At Create Subscription page In Protocol field, select Email In the Endpoint field, enter your email, for example example@gmail.com Select Create Subscription Successfully created Subscription, now Status is Pending confirmation Access your gmail (or the email you registered in Subscription), proceed with Confirm subscription Confirmed successfully Return to the Subscription interface, now the Status has changed to the confirmed state.\nSave the value SNS Topic ARN to prepare for the next step "
},
{
	"uri": "/5-apigateway/5.3-deployapi/",
	"title": "Deploy API",
	"tags": [],
	"description": "",
	"content": "Execution sequence At the monthly-sales-report-api interface Select Deploy API At the Deploy API page In Stage field, select *New stage* In the Stage name field, enter dev Select Deploy Successfully create Deploy API, save the Invoke URL value to prepare for the next step "
},
{
	"uri": "/2-aurorapostgres/2.3-restoredata/",
	"title": "Restore Example Data",
	"tags": [],
	"description": "",
	"content": "Execution sequence Click Download Source to download sample resources of the workshop After downloading, unzip Drag and drop to copy the file sales_db_backup.sql to the folder area of the MobaXterm window Copy successfully At the MobaXterm window Execute the following command to restore sample data with sales_db_backup.sql we just downloaded Change \u0026lt;CHANGE_YOUR_AURORA_POSTGRESQL_ENDPOINT_HERE\u0026gt; with Aurora PostgreSQL Endpoint we saved in step 2.1 Enter password postgres to log in pg_restore -h \u0026lt;CHANGE_YOUR_AURORA_POSTGRESQL_ENDPOINT_HERE\u0026gt; -p 5432 -U postgres -d sales -Fc sales_db_backup.sql Log in to Aurora PostgreSQL again with the following command, this time select database sales psql -h \u0026lt;CHANGE_YOUR_AURORA_POSTGRESQL_ENDPOINT_HERE\u0026gt; -p 5432 -U postgres -d sales Check the number of existing tables in the sales database with the command \\dt, we see there are 2 tables staffs and sales \\dt View data of the staffs table SELECT * FROM staffs; View data of the sales table SELECT * FROM sales LIMIT 20; Exit Aurora PostgreSQL exit "
},
{
	"uri": "/1-preparation/1.4-createec2/",
	"title": "Create EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access EC2 Console Select Key Pairs Select Create key pair At the Create key pair page In Name field, enter FCJ-keypair In the Key pair type field, select RSA In the Private key file format field, select .pem Then select Create key pair and save the file FCJ-keypair.pem on your computer to use for the SSH service in the next steps Successfully created FCJ-keypair.pem Return to EC2 Console Select Instances Select Launch instances At Launch an Instance page In the Name field, enter FCJ-Instance In the Amazon Machine Image (AMI) field, select Amazon Linux 2023 AMI In the Instance type field, select t2.micro In the Key pair (login) field, select the FCJ-keypair created in the previous step In Network settings select Edit In the VPC field, select FCJ-vpc In the Subnet field, select FCJ-subnet-public1-ap-southeast-1a In the Auto-assign Public IP field, select Enable, if not Enable then you may have skipped Enable auto-assign public IPv4 address in step 1.1 In the Firewall (security groups) field, select Select existing security group, and select EC2-Security-Group Check the information again and select Launch instance Successfully created EC2 Instance "
},
{
	"uri": "/4-lambda/4.4-lambdafunction/",
	"title": "Create Lambda Function",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access Lambda Console Select Functions Select Create function At Create function page In the Function name field, enter monthly-sales-report-lambda In the Runtime field, select Python 3.11 In the Execute role field, select Use an existing role, then select Lambda-Report-Role Select Create function Successfully created Lambda Function Select Layer, then select Add Layer At the Add Layer page Select Custom layers, select report-layer and version 1 Select Add Successfully Add Layer to Lambda Function Copy and paste the following code into the Code section of the Lambda Function\nimport os\rimport boto3\rimport json\rimport pytz\rimport psycopg2\rimport datetime\rfrom openpyxl import Workbook\rfrom openpyxl.chart import BarChart, Reference, shapes\rfrom openpyxl.utils import get_column_letter\rfrom openpyxl.styles import Font, Alignment, Border, Side, PatternFill\rpostgres_dbname = os.environ[\u0026#39;postgres_dbname\u0026#39;]\rpostgres_user = os.environ[\u0026#39;postgres_user\u0026#39;]\rpostgres_password = os.environ[\u0026#39;postgres_password\u0026#39;]\rpostgres_host = os.environ[\u0026#39;postgres_host\u0026#39;]\rs3_bucket_result = os.environ[\u0026#39;s3_bucket_result\u0026#39;]\rs3_bucket_web = os.environ[\u0026#39;s3_bucket_web\u0026#39;]\rsns_topic_arn = os.environ[\u0026#39;sns_topic_arn\u0026#39;]\rdef get_data(month, year):\r# Connect to Aurora PostgreSQL\rconn = psycopg2.connect(f\u0026#34;dbname={postgres_dbname} user={postgres_user} password={postgres_password} host={postgres_host}\u0026#34;)\rcur = conn.cursor()\r# Query Profit for Total Profit Chart\rcur.execute(f\u0026#34;SELECT to_char(date_trunc(\u0026#39;day\u0026#39;, date), \u0026#39;fmDD\u0026#39;) AS date, SUM(profit) \\\rFROM sales \\\rWHERE EXTRACT(MONTH FROM date) = {month} AND EXTRACT(YEAR FROM date) = {year} \\\rGROUP BY date_trunc(\u0026#39;day\u0026#39;, date) \\\rORDER BY date_trunc(\u0026#39;day\u0026#39;, date);\u0026#34;)\rdata_profit = cur.fetchall()\r# Query Profit for Top 10 Product Table\rcur.execute(f\u0026#34;SELECT ROW_NUMBER() OVER (ORDER BY SUM(profit) DESC) AS id, product, SUM(profit) \\\rFROM sales \\\rWHERE EXTRACT(MONTH FROM date) = {month} AND EXTRACT(YEAR FROM date) = {year} \\\rGROUP BY product \\\rORDER BY SUM(profit) DESC \\\rLIMIT 10;\u0026#34;)\rdata_product = cur.fetchall()\r# Query Profit for Top 10 Staff Table\rcur.execute(f\u0026#34;SELECT ROW_NUMBER() OVER (ORDER BY SUM(sales.profit) DESC) AS id, staffs.name, SUM(sales.profit) \\\rFROM sales \\\rJOIN staffs ON staffs.id = sales.staff_id \\\rWHERE EXTRACT(MONTH FROM date) = {month} AND EXTRACT(YEAR FROM date) = {year} \\\rGROUP BY staffs.name \\\rORDER BY SUM(sales.profit) DESC \\\rLIMIT 10;\u0026#34;)\rdata_staff = cur.fetchall()\r# Disconnect from Aurora PostgreSQL\rcur.close()\rconn.close()\rreturn data_profit, data_product, data_staff\rdef create_report(month, year):\r# Get data from Aurora PostgreSQL\rdata_profit, data_product, data_staff = get_data(month, year)\r# Create new Excel Workbook\rwb = Workbook()\rws = wb.active # Sheet 1\rws2 = wb.create_sheet(title=\u0026#34;Reference\u0026#34;) # Sheet 2\r# Create Title Report\rreport_name = f\u0026#34;{datetime.datetime.strptime(str(month), \u0026#39;%m\u0026#39;).strftime(\u0026#39;%b\u0026#39;)}-{year}-Monthly-Sales-Report\u0026#34;\rws.title = \u0026#34;Report\u0026#34;\rws[\u0026#34;A1\u0026#34;] = f\u0026#34;Monthly Sales Report\u0026#34;\rws[\u0026#34;A1\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\rws[\u0026#34;A1\u0026#34;].font = Font(size=30, bold=True)\rws.merge_cells(\u0026#34;A1:J1\u0026#34;)\rws[\u0026#34;A1\u0026#34;].fill = PatternFill(start_color=\u0026#34;4cd137\u0026#34;, end_color=\u0026#34;4cd137\u0026#34;, fill_type=\u0026#34;solid\u0026#34;)\rws[\u0026#34;A2\u0026#34;] = f\u0026#34;{datetime.datetime.strptime(str(month), \u0026#39;%m\u0026#39;).strftime(\u0026#39;%b\u0026#39;)}-{year}\u0026#34;\rws[\u0026#34;A2\u0026#34;].font = Font(size=20, bold=True)\rtime_create = datetime.datetime.now(pytz.timezone(\u0026#39;Asia/Ho_Chi_Minh\u0026#39;)).strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\rws[\u0026#34;I2\u0026#34;] = f\u0026#34;Issue: {time_create}\u0026#34;\rws[\u0026#34;I2\u0026#34;].font = Font(italic=True)\r# Add Total Profit Data to Sheet2\rfor row_data in data_profit:\rws2.append(row_data)\r# Create Total Profit Chart\rchart = BarChart()\rchart.title = \u0026#34;Total Profit Chart by Day\u0026#34;\rchart.width = 16\rchart.height = 10\rchart.x_axis.title = \u0026#34;Day\u0026#34;\rchart.y_axis.title = \u0026#34;Profit ($)\u0026#34;\rdata_range = Reference(ws2, min_col=2, max_col=2, min_row=1, max_row=len(data_profit))\rlabels = Reference(ws2, min_col=1, min_row=1, max_row=len(data_profit))\rchart.add_data(data_range)\rchart.set_categories(labels)\rchart.graphical_properties = shapes.GraphicalProperties()\rchart.graphical_properties.line.noFill = True\rchart.style = 8\rchart.legend = None\r# Add Total Profit Chart to Sheet1\rws.add_chart(chart, \u0026#34;A6\u0026#34;)\r# Create Title Top 10 Product Table\rws[\u0026#34;B29\u0026#34;] = \u0026#34;Top 10 Products\u0026#34;\rws[\u0026#34;B29\u0026#34;].font = Font(size=18, bold=True)\rws[\u0026#34;B29\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\rws.merge_cells(\u0026#34;B29:D29\u0026#34;)\r# Create Title Top 10 Staff Table\rws[\u0026#34;G29\u0026#34;] = \u0026#34;Top 10 Staffs\u0026#34;\rws[\u0026#34;G29\u0026#34;].font = Font(size=18, bold=True)\rws.merge_cells(\u0026#34;G29:I29\u0026#34;)\rws[\u0026#34;G29\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\r# Format Header Table\rcell_format = {\r\u0026#34;B31\u0026#34;: [\u0026#34;id\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;B31\u0026#34;, 2],\r\u0026#34;C31\u0026#34;: [\u0026#34;Product\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;C31\u0026#34;, 1.1],\r\u0026#34;D31\u0026#34;: [\u0026#34;Total_Profit\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;D31\u0026#34;, 1.1],\r\u0026#34;G31\u0026#34;: [\u0026#34;id\u0026#34;, \u0026#34;G\u0026#34;, \u0026#34;G31\u0026#34;, 2],\r\u0026#34;H31\u0026#34;: [\u0026#34;Staff\u0026#34;, \u0026#34;H\u0026#34;, \u0026#34;H31\u0026#34;, 1.5],\r\u0026#34;I31\u0026#34;: [\u0026#34;Total_Profit\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;I31\u0026#34;, 1.1]\r}\rthin_border = Border(left=Side(style=\u0026#34;thin\u0026#34;),\rright=Side(style=\u0026#34;thin\u0026#34;),\rtop=Side(style=\u0026#34;thin\u0026#34;),\rbottom=Side(style=\u0026#34;thin\u0026#34;))\rfor cell, cell_value in cell_format.items():\rws[f\u0026#34;{cell}\u0026#34;] = f\u0026#34;{cell_value[0]}\u0026#34;\rws[f\u0026#34;{cell}\u0026#34;].font = Font(size=12, bold=True)\rws[f\u0026#34;{cell}\u0026#34;].fill = PatternFill(start_color=\u0026#34;0abde3\u0026#34;, end_color=\u0026#34;0abde3\u0026#34;, fill_type=\u0026#34;solid\u0026#34;)\rws[f\u0026#34;{cell}\u0026#34;].border = thin_border\rws[f\u0026#34;{cell}\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\rws.column_dimensions[f\u0026#34;{cell_value[1]}\u0026#34;].width = len(str(ws[f\u0026#34;{cell_value[2]}\u0026#34;].value)) * cell_value[3]\r# Insert Value Top 10 Product Table\rfor row_idx, row in enumerate(data_product, 32):\rfor col_idx, value in enumerate(row, 2):\rcol_letter = get_column_letter(col_idx)\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;] = str(value)\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;].border = thin_border\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\r# Insert Value Top 10 Staff Table\rfor row_idx, row in enumerate(data_staff, 32):\rfor col_idx, value in enumerate(row, 7):\rcol_letter = get_column_letter(col_idx)\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;] = str(value)\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;].border = thin_border\rws[f\u0026#34;{col_letter}{row_idx}\u0026#34;].alignment = Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;)\r# Save Excel\rws.page_setup.orientation = ws.ORIENTATION_PORTRAIT\rws.print_options.horizontalCentered = True\rwb.save(f\u0026#34;/tmp/{report_name}.xlsx\u0026#34;)\r# Upload pdf file to S3\rurl = upload_report_to_S3(f\u0026#34;/tmp/{report_name}.xlsx\u0026#34;, f\u0026#34;{s3_bucket_result}\u0026#34;)\r# Send Presigned URL to send User to Download Report\rsns_send_report_url(report_name, url)\rreturn report_name, url\rdef upload_report_to_S3(file_name, s3_bucket_result, object_name=None):\r# If S3 object_name was not specified, use file_name\rif object_name is None:\robject_name = os.path.basename(file_name)\r# Upload the file to S3 Bucket\rs3_client = boto3.client(\u0026#34;s3\u0026#34;)\rs3_client.upload_file(file_name, s3_bucket_result, object_name)\r# Create Presigned URL to send into User to Download Report\rurl = s3_client.generate_presigned_url(\u0026#34;get_object\u0026#34;, Params={\u0026#34;Bucket\u0026#34;: s3_bucket_result, \u0026#34;Key\u0026#34;: object_name},\rExpiresIn=604800)\rreturn url\rdef sns_send_report_url(report_name, url):\rsns_client = boto3.client(\u0026#34;sns\u0026#34;)\rmessage = f\u0026#34;{report_name} has been successfully created!\\n\\nThis is URL to Download Report : {url}\u0026#34;\r# Send message to SNS topic\rresponse = sns_client.publish(\rTopicArn=sns_topic_arn,\rSubject=report_name,\rMessage=message,\rMessageStructure=\u0026#34;string\u0026#34;\r)\rdef lambda_handler(event, context):\rheaders = event[\u0026#39;headers\u0026#39;]\rorigin = f\u0026#39;https://{s3_bucket_web}.s3.ap-southeast-1.amazonaws.com\u0026#39;\rresponse_headers = {\r\u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;,\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: origin\r}\rif headers.get(\u0026#39;origin\u0026#39;) != None and headers.get(\u0026#39;origin\u0026#39;) == origin or headers.get(\u0026#39;origin\u0026#39;) == \u0026#39;event-bridge\u0026#39;:\rif headers.get(\u0026#39;origin\u0026#39;) == origin:\rmonth = json.loads(event[\u0026#39;body\u0026#39;])[\u0026#39;month\u0026#39;]\ryear = json.loads(event[\u0026#39;body\u0026#39;])[\u0026#39;year\u0026#39;]\rif headers.get(\u0026#39;origin\u0026#39;) == \u0026#39;event-bridge\u0026#39;:\rmonth = (datetime.date.today().replace(day=1) - datetime.timedelta(days=1)).month\ryear = (datetime.date.today().replace(day=1) - datetime.timedelta(days=1)).year\rreport_name, url = create_report(month, year)\rresponse = {\r\u0026#39;statusCode\u0026#39;: 200,\r\u0026#39;headers\u0026#39;: response_headers,\r\u0026#39;body\u0026#39;:\rjson.dumps({\r\u0026#39;status\u0026#39;: \u0026#39;Success\u0026#39;,\r\u0026#39;report_name\u0026#39;: report_name,\r\u0026#39;url\u0026#39;: url\r}),\r}\rreturn response\rreturn {\r\u0026#39;statusCode\u0026#39;: 403,\r\u0026#39;headers\u0026#39;: response_headers,\r\u0026#39;body\u0026#39;: json.dumps({\u0026#39;status\u0026#39;: \u0026#39;Forbidden!\u0026#39;}),\r} Select Deploy, successfully updated Code for Lambda Function Functions of Functions in Lambda Function:\nget_data: Connect to Aurora PostgreSQL to get data\ncreate_report: Receive data from get_data function, create Excel Report\nupload_report_to_S3: Upload Report to S3 and create Presigned URL\nsns_send_report_url: Send notification email and Presigned URL to User to Download Report\nlambda_handler: Handles input events from Static Website or EventBridge, with appropriate logic to calculate month and year as input to the function create_report\n"
},
{
	"uri": "/4-lambda/",
	"title": "Create Lambda Function",
	"tags": [],
	"description": "",
	"content": "\nIn this chapter, we will learn the steps to build a complete Lamda Function.\nTo ensure long-term support for Lambda Function Runtime, we will choose Python 3.11\nContent 4.1 Tạo IAM Role cho Lambda\n4.2 Install Python Dependencies\n4.3 Create Lambda Layer\n4.4 Create Lambda Function\n4.5 Lambda Configuration\n"
},
{
	"uri": "/5-apigateway/",
	"title": "Create API Gateway",
	"tags": [],
	"description": "",
	"content": "\nIn this chapter, we will learn the steps to build an API Gateway\nContent 5.1 Create API Gateway\n5.2 Create Resource, Method\n5.3 Deploy API\n"
},
{
	"uri": "/1-preparation/1.5-createrole/",
	"title": "Create IAM Role for EC2",
	"tags": [],
	"description": "",
	"content": "Create IAM Role for EC2 Access IAM Console Select Roles Select Create Role At Select trusted entity page In the Trusted entity type field, select AWS service In the Service or use case field, select EC2 Scroll to the bottom, select Next At the Add permissions page In the Permissions policies field, select AdministratorAccess Scroll to the bottom, select Next At page Name, review, and create In the Role name field, enter Admin-Role Check the information again, then select Create Role Modify IAM Role for EC2 Access EC2 Console Select FCJ-Instance Select Actions, select Security, then select Modify IAM Role At Modify IAM Role page In the IAM Role field, select the Admin-Role created in the previous step Select Update IAM Role Successfully Modify IAM Role for FCJ-Instance Save the value Public IPv4 address to prepare for the next step\n"
},
{
	"uri": "/4-lambda/4.5-lambdaconfig/",
	"title": "Lambda Configuration",
	"tags": [],
	"description": "",
	"content": "At the interface of Lambda Function monthly-sales-report-lambda, select Configuration\nUpdate General Configuration Select General Configuration, then select Edit At Basic settings page In Memory field, enter 256 In Timeout field, enter 10 Select Save Successfully Update General Configuration Add Environment Variables Select Enviroment variables, then select Edit On the Edit environment variables page, select Add environment variable\nAdd variables one by one according to the following table. Please change the information to suit you Key Value Note Reference (Chapter) postgres_dbname sales Database name 2.1 postgres_user postgres Database user 2.1 postgres_password postgres Database password 2.1 postgres_host aurora-postgresql.cluster-cdw3n7fovj7h.ap-southeast-1.rds.amazonaws.com Aurora PostgreSQL Endpoint 2.1 s3_bucket_result monthly-sales-report-result S3 Bucket to save Report 1.6 s3_bucket_web monthly-sales-report-web S3 Bucket to save Static Website 1.6 sns_topic_arn arn:aws:sns:ap-southeast-1:\u0026lt;CHANGE_YOUR_ACCOUNT_ID_HERE\u0026gt;:monthly-sales-report-topic SNS Topic ARN 3 Successfully Add Environment Variables Assign VPC to Lambda Select VPC, then select Edit At Edit VPC page In the VPC field, select FCJ-vpc In the Subnets field, select FCJ-subnet-private1-ap-southeast-1a and FCJ-subnet-private2-ap-southeast-1b In the Security groups field, select Lambda-Security-Group Select Save Successfully Assign VPC to Lambda When placing Lambda in VPC, Lambda cannot connect to the Internet.\nIn this workshop we created:\n+S3 Gateway Endpoint lets Lambda interact with S3 through this Endpoint\n+SNS Interface Endpoint lets Lambda interact with SNS through this Endpoint\nTherefore, all traffic within the VPC is not public to the Internet. This is a best practice to keep your system secure.\n"
},
{
	"uri": "/6-eventbridge/",
	"title": "Create EventBridge Scheduler",
	"tags": [],
	"description": "",
	"content": "\nIn this chapter, we will take steps to create an EventBridge Scheduler to trigger automatic report generation at 08:00 on the 1st of every month (UTC+07:00)\nThis means that the previous month\u0026rsquo;s report will be generated on the 1st of the following month at 08:00\nThe order of execution Access Amazon EvenBridge Service Console Select Schedules Select Create schedule At Specify schedule detail page In the Schedule name and description section In the Schedule name field, enter monthly-sales-report-event In the Schedule pattern section In the Occurrence field, select Recurring schedule In the Schedule type field, select Cron-based schedule In the Cron expression field, enter 0 8 1 * ? * (refer to the picture below) In the Flexible time window field, select Off Scroll to the bottom, select Next On the Select target page In the Target detail section In the Schedule name field, select AWS Lambda Invoke In the Invoke section In the Lambda function field, select monthly-sales-report-lambda In the payload field, enter {\u0026quot;headers\u0026quot;: {\u0026quot;origin\u0026quot;: \u0026quot;event-bridge\u0026quot;}}\n(Designed to match the input logic of the lambda_handler function) Select Next, Next, leave everything as default, then select Create schedule Successfully created EventBridge Scheduler to trigger automatic report generation at 08:00 on the 1st day of every month (UTC+07:00) "
},
{
	"uri": "/1-preparation/1.6-creates3bucket/",
	"title": "Create S3 Buckets",
	"tags": [],
	"description": "",
	"content": "Execution sequence We proceed to perform SSH into EC2 Instance FCJ-Instance\nHere we use MobaXterm. You can see more details Connect Amazon Linux 2 using MobaXterm Select Session Select SSH In the Remote host field, enter the Public IPv4 Address that was saved in step 1.5 Select Specify username, enter ec2-user Select Advange SSH Settings Select use private key, then retrieve the path to the file FCJ-keypair.pem saved in step 1.4 Select OK Connected successfully as shown below\nExecute the following commands to create S3 Buckets In which: monthly-sales-report-layer : Bucket to store Zip files used to create Lambda Layers monthly-sales-report-result : Bucket to store Reports created for long-term storage monthly-sales-report-web : Bucket to save Static Website aws s3api create-bucket --bucket monthly-sales-report-layer --region ap-southeast-1 --create-bucket-configuration LocationConstraint=ap-southeast-1\raws s3api create-bucket --bucket monthly-sales-report-result --region ap-southeast-1 --create-bucket-configuration LocationConstraint=ap-southeast-1\raws s3api create-bucket --bucket monthly-sales-report-web --region ap-southeast-1 --create-bucket-configuration LocationConstraint=ap-southeast-1 If you get an error creating Bucket with the same name already exists because the name of the S3 Bucket is unique worldwide, you must choose the name accordingly.\nSave these names to prepare information for related resources in the next steps.\nAccess S3 Console Select Buckets, we will see the 3 Buckets we just created "
},
{
	"uri": "/7-staticwebsite/",
	"title": "Create Static Website",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will learn the steps to create a Static Website on S3\nContent 7.1 Upload Website Into S3\n7.2 Public Static Website\n7.3 Check website\n"
},
{
	"uri": "/8-check/",
	"title": "Test Operation",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will test the operation of the application we have built in two ways:\nFrom Static Website From EventBridge Content 8.1 From Static Website\n8.2 From EventBridge\n"
},
{
	"uri": "/9-cleanup/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "We\u0026rsquo;ll go through the following steps to delete the resources we created in this workshop lesson.\nDelete Aurora PostgreSQL Access RDS Console\nSelect Databases, select aurora-postgresql-instance-1 Select Actions, then select Delete Make confirmation (if any) to proceed with Delete Select aurora-postgresql Select Actions, then select Delete Uncheck Create final snapshot, check I acknowledge\u0026hellip; Enter delete me, then select Delete DB Cluster to proceed with Delete After deleting Aurora PostgreSQL, select Subnet groups Select the 2 DB Subnet groups created, then select Delete Make confirmation (if any) to proceed with Delete Delete SNS Topic Access Amazon SNS Console\nSelect Topics, select monthly-sales-report-topic, then select Delete Make confirmation (if any) to proceed with Delete Delete EvenBridge Scheduler Access Amazon EvenBridge Service Console\nSelect Schedulers, select monthly-sales-report-event, then select Delete Make confirmation (if any) to proceed with Delete Delete Lambda Function Access AWS Lambda Console\nSelect Functions, select monthly-sales-report-lambda Select Actions, then select Delete Make confirmation (if any) to proceed with Delete Delete Lambda Layer Select Layers, select report-layer, then select Delete Make confirmation (if any) to proceed with Delete Delete S3 Buckets Access S3 Management Console\nSelect Buckets, select monthly-sales-report-layer Select Empty Make confirmation (if any) to proceed with Empty Select Delete Make confirmation (if any) to proceed with Delete Do the same for 2 Buckets monthly-sales-report-result and monthly-sales-report-web Delete API Gateway Access API Gateway Console\nSelect APIs, select monthly-sales-report-api, then select Delete Make confirmation (if any) to proceed with Delete Delete IAM Role Access IAM Console\nSelect Roles, select Admin-Role, Lambda-Report-Role and Role of the form Amazon-EventBridge-Scheduler-LAMBDA-[Hash], then select ** Delete** Make confirmation (if any) to proceed with Delete Select Policies, search and select Lambda-Report-Policy, then select Delete Make confirmation (if any) to proceed with Delete Do the same for Policies of the form Amazon-EventBridge-Scheduler-LAMBDA-[Hash] Delete EC2 Instances Access EC2 Console\nSelect Instances, select FCJ-Instance Select Instance state, select Terminate instance Make confirmation (if any) to proceed with Terminate Delete Key pairs Select Key Pairs, select FCJ-keypair Select Actions, then select Delete Make confirmation (if any) to proceed with Delete Delete SNS Interface Endpoint Access VPC Console\nSelect Endpoints, select SNS-Endpoint Select Actions, then select Delete VPC endpoints Make confirmation (if any) to proceed with Delete Wait until SNS-Endpoint is finished deleting Delete DB-Security-Group (After deleting Aurora PostgreSQL) Select Security Groups, select DB-Security-Group Select Actions, then select Delete security groups Make confirmation (if any) to proceed with Delete Delete SNS-Endpoint-Security-Group, Lambda-Security-Group, EC2-Security-Group one by one following the same steps Delete VPC Select Your VPCs, select FCJ-vpc Select Actions, then select Delete VPC Make confirmation (if any) to proceed with Delete "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]